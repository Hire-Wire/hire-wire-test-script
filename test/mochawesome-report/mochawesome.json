{
  "stats": {
    "suites": 7,
    "tests": 47,
    "passes": 47,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-21T00:04:23.068Z",
    "end": "2024-11-21T00:10:40.581Z",
    "duration": 377513,
    "testsRegistered": 47,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "29fbce0c-91d1-4fb9-a175-bcd05db01409",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "30ee343b-f37d-4206-a5ba-7fe02821c035",
          "title": "User Registration Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\user_registration_test.js",
          "file": "\\user_registration_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"before all\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 966,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "ca5effc6-f202-4318-8584-fe1cdd099aa9",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"after all\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "4bc82f4e-3623-4a3c-a2fa-231e7568dad0",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"after each\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 5059,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "45f1c128-4739-4f20-abbc-c23f764df1c8",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Use Case 1:",
              "fullTitle": "User Registration Functionality Test Use Case 1:",
              "timedOut": false,
              "duration": 2764,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Navigate to the registration page\nawait navigateToRegistrationPage();\nconsole.log(\"Email:\", user.emailAddress);\nconsole.log(\"First Name:\", user.firstName);\n// Step 2: Fill in the registration form with user credentials\nawait driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\nawait driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\nawait driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\nawait driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\nawait driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n// Step 3: Submit the registration form\nconst registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\nawait registerButton.click();\nawait driver.sleep(1000);\n// Step 4: Verify the user is redirected to the user profile page\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful registration, the user should be redirected to the user profile page.\");",
              "err": {},
              "uuid": "5d815430-c7f5-4438-b2b0-9cb0ca2a7053",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 2:",
              "fullTitle": "User Registration Functionality Test Use Case 2:",
              "timedOut": false,
              "duration": 1678,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Navigate to the registration page\nawait navigateToRegistrationPage();\nconsole.log(\"Email:\", user.emailAddress);\nconsole.log(\"First Name:\", user.firstName);\n// Step 2: Fill in the registration form with user credentials\nawait driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\nawait driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\nawait driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\nawait driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\nawait driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n// Step 3: Submit the registration form\nconst registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\nawait registerButton.click();\nawait driver.sleep(1000);\n// Step 4: Verify the user is redirected to the user profile page\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful registration, the user should be redirected to the user profile page.\");",
              "err": {},
              "uuid": "6b760041-3e04-4963-bbe7-b140d968a442",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 3:",
              "fullTitle": "User Registration Functionality Test Use Case 3:",
              "timedOut": false,
              "duration": 1613,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Navigate to the registration page\nawait navigateToRegistrationPage();\nconsole.log(\"Email:\", user.emailAddress);\nconsole.log(\"First Name:\", user.firstName);\n// Step 2: Fill in the registration form with user credentials\nawait driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\nawait driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\nawait driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\nawait driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\nawait driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n// Step 3: Submit the registration form\nconst registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\nawait registerButton.click();\nawait driver.sleep(1000);\n// Step 4: Verify the user is redirected to the user profile page\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful registration, the user should be redirected to the user profile page.\");",
              "err": {},
              "uuid": "f21c820f-54de-4dec-b6ca-3630aa11c99c",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 4:",
              "fullTitle": "User Registration Functionality Test Use Case 4:",
              "timedOut": false,
              "duration": 1590,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Navigate to the registration page\nawait navigateToRegistrationPage();\nconsole.log(\"Email:\", user.emailAddress);\nconsole.log(\"First Name:\", user.firstName);\n// Step 2: Fill in the registration form with user credentials\nawait driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\nawait driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\nawait driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\nawait driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\nawait driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n// Step 3: Submit the registration form\nconst registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\nawait registerButton.click();\nawait driver.sleep(1000);\n// Step 4: Verify the user is redirected to the user profile page\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful registration, the user should be redirected to the user profile page.\");",
              "err": {},
              "uuid": "5fc60de8-2eff-4eb6-bb23-a11d2a13c83a",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 5:",
              "fullTitle": "User Registration Functionality Test Use Case 5:",
              "timedOut": false,
              "duration": 1535,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Navigate to the registration page\nawait navigateToRegistrationPage();\nconsole.log(\"Email:\", user.emailAddress);\nconsole.log(\"First Name:\", user.firstName);\n// Step 2: Fill in the registration form with user credentials\nawait driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\nawait driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\nawait driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\nawait driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\nawait driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n// Step 3: Submit the registration form\nconst registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\nawait registerButton.click();\nawait driver.sleep(1000);\n// Step 4: Verify the user is redirected to the user profile page\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful registration, the user should be redirected to the user profile page.\");",
              "err": {},
              "uuid": "33cfcba8-8d6c-43a5-add9-ca229c289d8a",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 6:",
              "fullTitle": "User Registration Functionality Test Use Case 6:",
              "timedOut": false,
              "duration": 1537,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Navigate to the registration page\nawait navigateToRegistrationPage();\nconsole.log(\"Email:\", user.emailAddress);\nconsole.log(\"First Name:\", user.firstName);\n// Step 2: Fill in the registration form with user credentials\nawait driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\nawait driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\nawait driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\nawait driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\nawait driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n// Step 3: Submit the registration form\nconst registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\nawait registerButton.click();\nawait driver.sleep(1000);\n// Step 4: Verify the user is redirected to the user profile page\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful registration, the user should be redirected to the user profile page.\");",
              "err": {},
              "uuid": "069cdc8d-07e2-43b2-af18-12f9ce563517",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 7:",
              "fullTitle": "User Registration Functionality Test Use Case 7:",
              "timedOut": false,
              "duration": 1559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Navigate to the registration page\nawait navigateToRegistrationPage();\nconsole.log(\"Email:\", user.emailAddress);\nconsole.log(\"First Name:\", user.firstName);\n// Step 2: Fill in the registration form with user credentials\nawait driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\nawait driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\nawait driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\nawait driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\nawait driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n// Step 3: Submit the registration form\nconst registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\nawait registerButton.click();\nawait driver.sleep(1000);\n// Step 4: Verify the user is redirected to the user profile page\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful registration, the user should be redirected to the user profile page.\");",
              "err": {},
              "uuid": "08a81890-a04e-4baf-9bc8-d349eaac6ae8",
              "parentUUID": "30ee343b-f37d-4206-a5ba-7fe02821c035",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d815430-c7f5-4438-b2b0-9cb0ca2a7053",
            "6b760041-3e04-4963-bbe7-b140d968a442",
            "f21c820f-54de-4dec-b6ca-3630aa11c99c",
            "5fc60de8-2eff-4eb6-bb23-a11d2a13c83a",
            "33cfcba8-8d6c-43a5-add9-ca229c289d8a",
            "069cdc8d-07e2-43b2-af18-12f9ce563517",
            "08a81890-a04e-4baf-9bc8-d349eaac6ae8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12276,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "97f865f0-e7e5-422d-8403-73eb35038aef",
          "title": "Login Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\user_login_test.js",
          "file": "\\user_login_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Login Functionality Test\"",
              "fullTitle": "Login Functionality Test \"before all\" hook in \"Login Functionality Test\"",
              "timedOut": false,
              "duration": 907,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "4889c7fe-9628-4a81-802e-c4b9abb6c3c9",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Login Functionality Test\"",
              "fullTitle": "Login Functionality Test \"after all\" hook in \"Login Functionality Test\"",
              "timedOut": false,
              "duration": 78,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "495b752e-4bc0-4245-a85d-4e8f08dd114b",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Login Functionality Test\"",
              "fullTitle": "Login Functionality Test \"after each\" hook in \"Login Functionality Test\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "8ad16791-03d7-4b9c-87c1-36b8cb4d08e0",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Use Case 1: ",
              "fullTitle": "Login Functionality Test Use Case 1: ",
              "timedOut": false,
              "duration": 7679,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page\nawait navigateToLoginPage();\n\n// Step 3: Click the login button to open the login form\n// Step 4: Fill in the email and password fields with the user's credentials\n// await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n// await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \n// Step 6: Verify the user is redirected to the job application page after login\n           await driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\nawait logoutIfLoggedIn();",
              "err": {},
              "uuid": "a770946a-549d-4116-a277-a271a85b2fe5",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 2: ",
              "fullTitle": "Login Functionality Test Use Case 2: ",
              "timedOut": false,
              "duration": 6661,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page\nawait navigateToLoginPage();\n\n// Step 3: Click the login button to open the login form\n// Step 4: Fill in the email and password fields with the user's credentials\n// await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n// await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \n// Step 6: Verify the user is redirected to the job application page after login\n           await driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\nawait logoutIfLoggedIn();",
              "err": {},
              "uuid": "53d1d102-155f-4b5a-9473-d2de7245a9e3",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 3: ",
              "fullTitle": "Login Functionality Test Use Case 3: ",
              "timedOut": false,
              "duration": 7310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page\nawait navigateToLoginPage();\n\n// Step 3: Click the login button to open the login form\n// Step 4: Fill in the email and password fields with the user's credentials\n// await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n// await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \n// Step 6: Verify the user is redirected to the job application page after login\n           await driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\nawait logoutIfLoggedIn();",
              "err": {},
              "uuid": "95340ef8-6a3c-458e-a1a7-1d829ef21653",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 4: ",
              "fullTitle": "Login Functionality Test Use Case 4: ",
              "timedOut": false,
              "duration": 6786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page\nawait navigateToLoginPage();\n\n// Step 3: Click the login button to open the login form\n// Step 4: Fill in the email and password fields with the user's credentials\n// await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n// await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \n// Step 6: Verify the user is redirected to the job application page after login\n           await driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\nawait logoutIfLoggedIn();",
              "err": {},
              "uuid": "48c05efd-e812-490c-84b1-87436726b7af",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 5: ",
              "fullTitle": "Login Functionality Test Use Case 5: ",
              "timedOut": false,
              "duration": 6560,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page\nawait navigateToLoginPage();\n\n// Step 3: Click the login button to open the login form\n// Step 4: Fill in the email and password fields with the user's credentials\n// await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n// await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \n// Step 6: Verify the user is redirected to the job application page after login\n           await driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\nawait logoutIfLoggedIn();",
              "err": {},
              "uuid": "6b42e74c-b605-47ad-b108-94c956d6a6de",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 6: ",
              "fullTitle": "Login Functionality Test Use Case 6: ",
              "timedOut": false,
              "duration": 6777,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page\nawait navigateToLoginPage();\n\n// Step 3: Click the login button to open the login form\n// Step 4: Fill in the email and password fields with the user's credentials\n// await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n// await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \n// Step 6: Verify the user is redirected to the job application page after login\n           await driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\nawait logoutIfLoggedIn();",
              "err": {},
              "uuid": "e8ee5011-557f-4ea1-9a88-fd2d52056c93",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use Case 7: ",
              "fullTitle": "Login Functionality Test Use Case 7: ",
              "timedOut": false,
              "duration": 6745,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page\nawait navigateToLoginPage();\n\n// Step 3: Click the login button to open the login form\n// Step 4: Fill in the email and password fields with the user's credentials\n// await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n// await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \n// Step 6: Verify the user is redirected to the job application page after login\n           await driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\nawait logoutIfLoggedIn();",
              "err": {},
              "uuid": "0572c043-4006-4e92-ae8c-fc4807b05b53",
              "parentUUID": "97f865f0-e7e5-422d-8403-73eb35038aef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a770946a-549d-4116-a277-a271a85b2fe5",
            "53d1d102-155f-4b5a-9473-d2de7245a9e3",
            "95340ef8-6a3c-458e-a1a7-1d829ef21653",
            "48c05efd-e812-490c-84b1-87436726b7af",
            "6b42e74c-b605-47ad-b108-94c956d6a6de",
            "e8ee5011-557f-4ea1-9a88-fd2d52056c93",
            "0572c043-4006-4e92-ae8c-fc4807b05b53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48518,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
          "title": "Add Education Experience to Profile Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\add_education_experience_test.js",
          "file": "\\add_education_experience_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Add Education Experience to Profile Functionality Test\"",
              "fullTitle": "Add Education Experience to Profile Functionality Test \"before all\" hook in \"Add Education Experience to Profile Functionality Test\"",
              "timedOut": false,
              "duration": 953,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "1c78d2d6-cc96-4fb5-9afc-2b88ce6e7241",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Add Education Experience to Profile Functionality Test\"",
              "fullTitle": "Add Education Experience to Profile Functionality Test \"after all\" hook in \"Add Education Experience to Profile Functionality Test\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "f4af7363-2dc4-4624-afa8-7845b678898f",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Add Education Experience to Profile Functionality Test\"",
              "fullTitle": "Add Education Experience to Profile Functionality Test \"after each\" hook in \"Add Education Experience to Profile Functionality Test\"",
              "timedOut": false,
              "duration": 5273,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "5f96c541-f822-4526-9dd1-c82757c098c0",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Test Case 1",
              "fullTitle": "Add Education Experience to Profile Functionality Test Test Case 1",
              "timedOut": false,
              "duration": 4827,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\n await logoutIfLoggedIn();\n\n // Step 2: Log in using valid credentials from the Profile.json file\n await navigateToPage(LOGIN_URL);\n\n // Enter login credentials\n const emailInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(emailInput), 5000);\n await emailInput.sendKeys(user.emailAddress);\n        \n // Wait for the password field to appear and send password\n const passwordInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(passwordInput), 5000);\n await passwordInput.sendKeys(user.password);\n \n const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n await submitButton.click();            \n \nawait driver.sleep(1000);\n const currentUrl = await driver.getCurrentUrl();   \n //assert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n // Step 3: Verify the user is redirected to the job application page after login\n await navigateToPage(EXPERIENCE_URL);\n for ( education of user.Education) {\n     // Step 4: Fill and submit the education form for each education entry\n     await driver.sleep(1000);\n     await driver.findElement(By.xpath('//button[contains(@class, \"add-button\") and text()=\"+ Add Education\"]')).click();\n     if (education.SchoolName) {\n         const schoolNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n         await schoolNameInput.clear(); // Clear the input field\n         await schoolNameInput.sendKeys(education.SchoolName); // Enter the new value\n     }\n     \n     if (education.AreaOfStudy) {\n         const areaOfStudyInput = await driver.findElement(By.xpath('//label[text()=\"Field of Study\"]/following-sibling::input'));\n         await areaOfStudyInput.clear();\n         await areaOfStudyInput.sendKeys(education.AreaOfStudy);\n     }\n     \n     if (education.startDate) {\n         const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n         await startDateInput.clear();\n         await startDateInput.sendKeys(education.startDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.endDate) {\n         const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n         await endDateInput.clear();\n         await endDateInput.sendKeys(education.endDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.degree) {\n         const degreeInput = await driver.findElement(By.xpath('//label[text()=\"Degree\"]/following-sibling::input'));\n         await degreeInput.clear();\n         await degreeInput.sendKeys(education.degree);\n     }\n     \n     if (education.grade) {\n         const gradeInput = await driver.findElement(By.xpath('//label[text()=\"Grade\"]/following-sibling::input'));\n         await gradeInput.clear();\n         await gradeInput.sendKeys(education.grade);\n     }\n     \n     //step 6: make sure the education field are saved.\n     const saveBtnEducation = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\")]'));\n     await saveBtnEducation.click();\n }",
              "err": {},
              "uuid": "aeec279b-376e-4d6a-b4cb-5ae48499ac11",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 2",
              "fullTitle": "Add Education Experience to Profile Functionality Test Test Case 2",
              "timedOut": false,
              "duration": 3758,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\n await logoutIfLoggedIn();\n\n // Step 2: Log in using valid credentials from the Profile.json file\n await navigateToPage(LOGIN_URL);\n\n // Enter login credentials\n const emailInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(emailInput), 5000);\n await emailInput.sendKeys(user.emailAddress);\n        \n // Wait for the password field to appear and send password\n const passwordInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(passwordInput), 5000);\n await passwordInput.sendKeys(user.password);\n \n const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n await submitButton.click();            \n \nawait driver.sleep(1000);\n const currentUrl = await driver.getCurrentUrl();   \n //assert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n // Step 3: Verify the user is redirected to the job application page after login\n await navigateToPage(EXPERIENCE_URL);\n for ( education of user.Education) {\n     // Step 4: Fill and submit the education form for each education entry\n     await driver.sleep(1000);\n     await driver.findElement(By.xpath('//button[contains(@class, \"add-button\") and text()=\"+ Add Education\"]')).click();\n     if (education.SchoolName) {\n         const schoolNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n         await schoolNameInput.clear(); // Clear the input field\n         await schoolNameInput.sendKeys(education.SchoolName); // Enter the new value\n     }\n     \n     if (education.AreaOfStudy) {\n         const areaOfStudyInput = await driver.findElement(By.xpath('//label[text()=\"Field of Study\"]/following-sibling::input'));\n         await areaOfStudyInput.clear();\n         await areaOfStudyInput.sendKeys(education.AreaOfStudy);\n     }\n     \n     if (education.startDate) {\n         const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n         await startDateInput.clear();\n         await startDateInput.sendKeys(education.startDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.endDate) {\n         const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n         await endDateInput.clear();\n         await endDateInput.sendKeys(education.endDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.degree) {\n         const degreeInput = await driver.findElement(By.xpath('//label[text()=\"Degree\"]/following-sibling::input'));\n         await degreeInput.clear();\n         await degreeInput.sendKeys(education.degree);\n     }\n     \n     if (education.grade) {\n         const gradeInput = await driver.findElement(By.xpath('//label[text()=\"Grade\"]/following-sibling::input'));\n         await gradeInput.clear();\n         await gradeInput.sendKeys(education.grade);\n     }\n     \n     //step 6: make sure the education field are saved.\n     const saveBtnEducation = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\")]'));\n     await saveBtnEducation.click();\n }",
              "err": {},
              "uuid": "e06f8e7b-4d46-41c7-817f-44af66e1b2ca",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 3",
              "fullTitle": "Add Education Experience to Profile Functionality Test Test Case 3",
              "timedOut": false,
              "duration": 3463,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\n await logoutIfLoggedIn();\n\n // Step 2: Log in using valid credentials from the Profile.json file\n await navigateToPage(LOGIN_URL);\n\n // Enter login credentials\n const emailInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(emailInput), 5000);\n await emailInput.sendKeys(user.emailAddress);\n        \n // Wait for the password field to appear and send password\n const passwordInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(passwordInput), 5000);\n await passwordInput.sendKeys(user.password);\n \n const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n await submitButton.click();            \n \nawait driver.sleep(1000);\n const currentUrl = await driver.getCurrentUrl();   \n //assert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n // Step 3: Verify the user is redirected to the job application page after login\n await navigateToPage(EXPERIENCE_URL);\n for ( education of user.Education) {\n     // Step 4: Fill and submit the education form for each education entry\n     await driver.sleep(1000);\n     await driver.findElement(By.xpath('//button[contains(@class, \"add-button\") and text()=\"+ Add Education\"]')).click();\n     if (education.SchoolName) {\n         const schoolNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n         await schoolNameInput.clear(); // Clear the input field\n         await schoolNameInput.sendKeys(education.SchoolName); // Enter the new value\n     }\n     \n     if (education.AreaOfStudy) {\n         const areaOfStudyInput = await driver.findElement(By.xpath('//label[text()=\"Field of Study\"]/following-sibling::input'));\n         await areaOfStudyInput.clear();\n         await areaOfStudyInput.sendKeys(education.AreaOfStudy);\n     }\n     \n     if (education.startDate) {\n         const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n         await startDateInput.clear();\n         await startDateInput.sendKeys(education.startDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.endDate) {\n         const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n         await endDateInput.clear();\n         await endDateInput.sendKeys(education.endDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.degree) {\n         const degreeInput = await driver.findElement(By.xpath('//label[text()=\"Degree\"]/following-sibling::input'));\n         await degreeInput.clear();\n         await degreeInput.sendKeys(education.degree);\n     }\n     \n     if (education.grade) {\n         const gradeInput = await driver.findElement(By.xpath('//label[text()=\"Grade\"]/following-sibling::input'));\n         await gradeInput.clear();\n         await gradeInput.sendKeys(education.grade);\n     }\n     \n     //step 6: make sure the education field are saved.\n     const saveBtnEducation = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\")]'));\n     await saveBtnEducation.click();\n }",
              "err": {},
              "uuid": "776dc103-4b06-4637-9f44-152a30c40cbf",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 4",
              "fullTitle": "Add Education Experience to Profile Functionality Test Test Case 4",
              "timedOut": false,
              "duration": 3434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\n await logoutIfLoggedIn();\n\n // Step 2: Log in using valid credentials from the Profile.json file\n await navigateToPage(LOGIN_URL);\n\n // Enter login credentials\n const emailInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(emailInput), 5000);\n await emailInput.sendKeys(user.emailAddress);\n        \n // Wait for the password field to appear and send password\n const passwordInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(passwordInput), 5000);\n await passwordInput.sendKeys(user.password);\n \n const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n await submitButton.click();            \n \nawait driver.sleep(1000);\n const currentUrl = await driver.getCurrentUrl();   \n //assert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n // Step 3: Verify the user is redirected to the job application page after login\n await navigateToPage(EXPERIENCE_URL);\n for ( education of user.Education) {\n     // Step 4: Fill and submit the education form for each education entry\n     await driver.sleep(1000);\n     await driver.findElement(By.xpath('//button[contains(@class, \"add-button\") and text()=\"+ Add Education\"]')).click();\n     if (education.SchoolName) {\n         const schoolNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n         await schoolNameInput.clear(); // Clear the input field\n         await schoolNameInput.sendKeys(education.SchoolName); // Enter the new value\n     }\n     \n     if (education.AreaOfStudy) {\n         const areaOfStudyInput = await driver.findElement(By.xpath('//label[text()=\"Field of Study\"]/following-sibling::input'));\n         await areaOfStudyInput.clear();\n         await areaOfStudyInput.sendKeys(education.AreaOfStudy);\n     }\n     \n     if (education.startDate) {\n         const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n         await startDateInput.clear();\n         await startDateInput.sendKeys(education.startDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.endDate) {\n         const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n         await endDateInput.clear();\n         await endDateInput.sendKeys(education.endDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.degree) {\n         const degreeInput = await driver.findElement(By.xpath('//label[text()=\"Degree\"]/following-sibling::input'));\n         await degreeInput.clear();\n         await degreeInput.sendKeys(education.degree);\n     }\n     \n     if (education.grade) {\n         const gradeInput = await driver.findElement(By.xpath('//label[text()=\"Grade\"]/following-sibling::input'));\n         await gradeInput.clear();\n         await gradeInput.sendKeys(education.grade);\n     }\n     \n     //step 6: make sure the education field are saved.\n     const saveBtnEducation = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\")]'));\n     await saveBtnEducation.click();\n }",
              "err": {},
              "uuid": "897067bd-2c15-4344-90d3-02c857e645a5",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 5",
              "fullTitle": "Add Education Experience to Profile Functionality Test Test Case 5",
              "timedOut": false,
              "duration": 3238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\n await logoutIfLoggedIn();\n\n // Step 2: Log in using valid credentials from the Profile.json file\n await navigateToPage(LOGIN_URL);\n\n // Enter login credentials\n const emailInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(emailInput), 5000);\n await emailInput.sendKeys(user.emailAddress);\n        \n // Wait for the password field to appear and send password\n const passwordInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(passwordInput), 5000);\n await passwordInput.sendKeys(user.password);\n \n const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n await submitButton.click();            \n \nawait driver.sleep(1000);\n const currentUrl = await driver.getCurrentUrl();   \n //assert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n // Step 3: Verify the user is redirected to the job application page after login\n await navigateToPage(EXPERIENCE_URL);\n for ( education of user.Education) {\n     // Step 4: Fill and submit the education form for each education entry\n     await driver.sleep(1000);\n     await driver.findElement(By.xpath('//button[contains(@class, \"add-button\") and text()=\"+ Add Education\"]')).click();\n     if (education.SchoolName) {\n         const schoolNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n         await schoolNameInput.clear(); // Clear the input field\n         await schoolNameInput.sendKeys(education.SchoolName); // Enter the new value\n     }\n     \n     if (education.AreaOfStudy) {\n         const areaOfStudyInput = await driver.findElement(By.xpath('//label[text()=\"Field of Study\"]/following-sibling::input'));\n         await areaOfStudyInput.clear();\n         await areaOfStudyInput.sendKeys(education.AreaOfStudy);\n     }\n     \n     if (education.startDate) {\n         const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n         await startDateInput.clear();\n         await startDateInput.sendKeys(education.startDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.endDate) {\n         const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n         await endDateInput.clear();\n         await endDateInput.sendKeys(education.endDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.degree) {\n         const degreeInput = await driver.findElement(By.xpath('//label[text()=\"Degree\"]/following-sibling::input'));\n         await degreeInput.clear();\n         await degreeInput.sendKeys(education.degree);\n     }\n     \n     if (education.grade) {\n         const gradeInput = await driver.findElement(By.xpath('//label[text()=\"Grade\"]/following-sibling::input'));\n         await gradeInput.clear();\n         await gradeInput.sendKeys(education.grade);\n     }\n     \n     //step 6: make sure the education field are saved.\n     const saveBtnEducation = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\")]'));\n     await saveBtnEducation.click();\n }",
              "err": {},
              "uuid": "b0f1165b-2c92-48f8-a845-ca60f5120c2a",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 6",
              "fullTitle": "Add Education Experience to Profile Functionality Test Test Case 6",
              "timedOut": false,
              "duration": 3211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\n await logoutIfLoggedIn();\n\n // Step 2: Log in using valid credentials from the Profile.json file\n await navigateToPage(LOGIN_URL);\n\n // Enter login credentials\n const emailInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(emailInput), 5000);\n await emailInput.sendKeys(user.emailAddress);\n        \n // Wait for the password field to appear and send password\n const passwordInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(passwordInput), 5000);\n await passwordInput.sendKeys(user.password);\n \n const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n await submitButton.click();            \n \nawait driver.sleep(1000);\n const currentUrl = await driver.getCurrentUrl();   \n //assert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n // Step 3: Verify the user is redirected to the job application page after login\n await navigateToPage(EXPERIENCE_URL);\n for ( education of user.Education) {\n     // Step 4: Fill and submit the education form for each education entry\n     await driver.sleep(1000);\n     await driver.findElement(By.xpath('//button[contains(@class, \"add-button\") and text()=\"+ Add Education\"]')).click();\n     if (education.SchoolName) {\n         const schoolNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n         await schoolNameInput.clear(); // Clear the input field\n         await schoolNameInput.sendKeys(education.SchoolName); // Enter the new value\n     }\n     \n     if (education.AreaOfStudy) {\n         const areaOfStudyInput = await driver.findElement(By.xpath('//label[text()=\"Field of Study\"]/following-sibling::input'));\n         await areaOfStudyInput.clear();\n         await areaOfStudyInput.sendKeys(education.AreaOfStudy);\n     }\n     \n     if (education.startDate) {\n         const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n         await startDateInput.clear();\n         await startDateInput.sendKeys(education.startDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.endDate) {\n         const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n         await endDateInput.clear();\n         await endDateInput.sendKeys(education.endDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.degree) {\n         const degreeInput = await driver.findElement(By.xpath('//label[text()=\"Degree\"]/following-sibling::input'));\n         await degreeInput.clear();\n         await degreeInput.sendKeys(education.degree);\n     }\n     \n     if (education.grade) {\n         const gradeInput = await driver.findElement(By.xpath('//label[text()=\"Grade\"]/following-sibling::input'));\n         await gradeInput.clear();\n         await gradeInput.sendKeys(education.grade);\n     }\n     \n     //step 6: make sure the education field are saved.\n     const saveBtnEducation = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\")]'));\n     await saveBtnEducation.click();\n }",
              "err": {},
              "uuid": "2f1b80b4-2471-4ea0-8608-3c7d1c0de201",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 7",
              "fullTitle": "Add Education Experience to Profile Functionality Test Test Case 7",
              "timedOut": false,
              "duration": 3286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\n await logoutIfLoggedIn();\n\n // Step 2: Log in using valid credentials from the Profile.json file\n await navigateToPage(LOGIN_URL);\n\n // Enter login credentials\n const emailInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(emailInput), 5000);\n await emailInput.sendKeys(user.emailAddress);\n        \n // Wait for the password field to appear and send password\n const passwordInput = await driver.wait(\n     until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n     5000\n );\n await driver.wait(until.elementIsVisible(passwordInput), 5000);\n await passwordInput.sendKeys(user.password);\n \n const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n await submitButton.click();            \n \nawait driver.sleep(1000);\n const currentUrl = await driver.getCurrentUrl();   \n //assert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n // Step 3: Verify the user is redirected to the job application page after login\n await navigateToPage(EXPERIENCE_URL);\n for ( education of user.Education) {\n     // Step 4: Fill and submit the education form for each education entry\n     await driver.sleep(1000);\n     await driver.findElement(By.xpath('//button[contains(@class, \"add-button\") and text()=\"+ Add Education\"]')).click();\n     if (education.SchoolName) {\n         const schoolNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n         await schoolNameInput.clear(); // Clear the input field\n         await schoolNameInput.sendKeys(education.SchoolName); // Enter the new value\n     }\n     \n     if (education.AreaOfStudy) {\n         const areaOfStudyInput = await driver.findElement(By.xpath('//label[text()=\"Field of Study\"]/following-sibling::input'));\n         await areaOfStudyInput.clear();\n         await areaOfStudyInput.sendKeys(education.AreaOfStudy);\n     }\n     \n     if (education.startDate) {\n         const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n         await startDateInput.clear();\n         await startDateInput.sendKeys(education.startDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.endDate) {\n         const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n         await endDateInput.clear();\n         await endDateInput.sendKeys(education.endDate); // Send the formatted date (yyyy-mm-dd)\n     }\n     \n     if (education.degree) {\n         const degreeInput = await driver.findElement(By.xpath('//label[text()=\"Degree\"]/following-sibling::input'));\n         await degreeInput.clear();\n         await degreeInput.sendKeys(education.degree);\n     }\n     \n     if (education.grade) {\n         const gradeInput = await driver.findElement(By.xpath('//label[text()=\"Grade\"]/following-sibling::input'));\n         await gradeInput.clear();\n         await gradeInput.sendKeys(education.grade);\n     }\n     \n     //step 6: make sure the education field are saved.\n     const saveBtnEducation = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\")]'));\n     await saveBtnEducation.click();\n }",
              "err": {},
              "uuid": "8f7115ba-4f4e-4ae4-b17e-25efebb1cb86",
              "parentUUID": "f50514cf-7990-4118-b42b-af7d8cc1a7e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aeec279b-376e-4d6a-b4cb-5ae48499ac11",
            "e06f8e7b-4d46-41c7-817f-44af66e1b2ca",
            "776dc103-4b06-4637-9f44-152a30c40cbf",
            "897067bd-2c15-4344-90d3-02c857e645a5",
            "b0f1165b-2c92-48f8-a845-ca60f5120c2a",
            "2f1b80b4-2471-4ea0-8608-3c7d1c0de201",
            "8f7115ba-4f4e-4ae4-b17e-25efebb1cb86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25217,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
          "title": "Add Job Experience Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\add_job_experience_test.js",
          "file": "\\add_job_experience_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Add Job Experience Functionality Test\"",
              "fullTitle": "Add Job Experience Functionality Test \"before all\" hook in \"Add Job Experience Functionality Test\"",
              "timedOut": false,
              "duration": 913,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "8b81aa04-225a-4d0d-8d81-69b99be06ccf",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Add Job Experience Functionality Test\"",
              "fullTitle": "Add Job Experience Functionality Test \"after all\" hook in \"Add Job Experience Functionality Test\"",
              "timedOut": false,
              "duration": 49,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "f6bcc2da-55ab-4c24-b514-e34d0726d9fd",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Test Case 1",
              "fullTitle": "Add Job Experience Functionality Test Test Case 1",
              "timedOut": false,
              "duration": 5572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToPage(LOGIN_URL);\n// Enter login credentials\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();            \n\n// step 3: Verify that the user is redirected to the dashboard after login.\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n// Step 4: Navigate to experience page\nawait navigateToPage(EXPERIENCE_URL);\nawait driver.sleep(1000); \nfor ( experience of user.workExperience) {\nawait driver.sleep(1000);  \n// Step 5: Fill and submit the job experience form for each experience entry and save them\nfor (const experience of user.workExperience) {\nconst addExperienceButton = await driver.wait(\n    until.elementLocated(By.xpath('//button[@class=\"add-button\" and text()=\"+ Add Experience\"]')),\n    10000\n);\nawait addExperienceButton.click();\nif (experience.JobTitle) {\n    const jobTitleInput = await driver.findElement(By.xpath('//label[text()=\"Job Title\"]/following-sibling::input'));\n    await jobTitleInput.sendKeys(experience.JobTitle);\n}\nif (experience.organizationName) {\n    const orgNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n    await orgNameInput.sendKeys(experience.organizationName);\n}\nif (experience.startDate) {\n    const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n    await startDateInput.sendKeys(experience.startDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.endDate) {\n    const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n    await endDateInput.sendKeys(experience.endDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.description) {\n    const descriptionInput = await driver.findElement(By.xpath('//label[text()=\"Description\"]/following-sibling::textarea'));\n    await descriptionInput.sendKeys(experience.description);\n}\n    \n//save the education entries\nconst saveBtn = await driver.findElement(By.css('button.save-button'));\nawait saveBtn.click();\n\n        }\n}",
              "err": {},
              "uuid": "f464a3a6-22c3-4c3d-9e29-ac473a9f009b",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 2",
              "fullTitle": "Add Job Experience Functionality Test Test Case 2",
              "timedOut": false,
              "duration": 10718,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToPage(LOGIN_URL);\n// Enter login credentials\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();            \n\n// step 3: Verify that the user is redirected to the dashboard after login.\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n// Step 4: Navigate to experience page\nawait navigateToPage(EXPERIENCE_URL);\nawait driver.sleep(1000); \nfor ( experience of user.workExperience) {\nawait driver.sleep(1000);  \n// Step 5: Fill and submit the job experience form for each experience entry and save them\nfor (const experience of user.workExperience) {\nconst addExperienceButton = await driver.wait(\n    until.elementLocated(By.xpath('//button[@class=\"add-button\" and text()=\"+ Add Experience\"]')),\n    10000\n);\nawait addExperienceButton.click();\nif (experience.JobTitle) {\n    const jobTitleInput = await driver.findElement(By.xpath('//label[text()=\"Job Title\"]/following-sibling::input'));\n    await jobTitleInput.sendKeys(experience.JobTitle);\n}\nif (experience.organizationName) {\n    const orgNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n    await orgNameInput.sendKeys(experience.organizationName);\n}\nif (experience.startDate) {\n    const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n    await startDateInput.sendKeys(experience.startDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.endDate) {\n    const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n    await endDateInput.sendKeys(experience.endDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.description) {\n    const descriptionInput = await driver.findElement(By.xpath('//label[text()=\"Description\"]/following-sibling::textarea'));\n    await descriptionInput.sendKeys(experience.description);\n}\n    \n//save the education entries\nconst saveBtn = await driver.findElement(By.css('button.save-button'));\nawait saveBtn.click();\n\n        }\n}",
              "err": {},
              "uuid": "fa48e0e0-3d9b-422b-8109-09333cb8bd43",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 3",
              "fullTitle": "Add Job Experience Functionality Test Test Case 3",
              "timedOut": false,
              "duration": 9436,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToPage(LOGIN_URL);\n// Enter login credentials\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();            \n\n// step 3: Verify that the user is redirected to the dashboard after login.\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n// Step 4: Navigate to experience page\nawait navigateToPage(EXPERIENCE_URL);\nawait driver.sleep(1000); \nfor ( experience of user.workExperience) {\nawait driver.sleep(1000);  \n// Step 5: Fill and submit the job experience form for each experience entry and save them\nfor (const experience of user.workExperience) {\nconst addExperienceButton = await driver.wait(\n    until.elementLocated(By.xpath('//button[@class=\"add-button\" and text()=\"+ Add Experience\"]')),\n    10000\n);\nawait addExperienceButton.click();\nif (experience.JobTitle) {\n    const jobTitleInput = await driver.findElement(By.xpath('//label[text()=\"Job Title\"]/following-sibling::input'));\n    await jobTitleInput.sendKeys(experience.JobTitle);\n}\nif (experience.organizationName) {\n    const orgNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n    await orgNameInput.sendKeys(experience.organizationName);\n}\nif (experience.startDate) {\n    const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n    await startDateInput.sendKeys(experience.startDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.endDate) {\n    const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n    await endDateInput.sendKeys(experience.endDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.description) {\n    const descriptionInput = await driver.findElement(By.xpath('//label[text()=\"Description\"]/following-sibling::textarea'));\n    await descriptionInput.sendKeys(experience.description);\n}\n    \n//save the education entries\nconst saveBtn = await driver.findElement(By.css('button.save-button'));\nawait saveBtn.click();\n\n        }\n}",
              "err": {},
              "uuid": "8f6c2f2a-8e84-4f5d-af74-90f20f94c1d2",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 4",
              "fullTitle": "Add Job Experience Functionality Test Test Case 4",
              "timedOut": false,
              "duration": 9829,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToPage(LOGIN_URL);\n// Enter login credentials\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();            \n\n// step 3: Verify that the user is redirected to the dashboard after login.\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n// Step 4: Navigate to experience page\nawait navigateToPage(EXPERIENCE_URL);\nawait driver.sleep(1000); \nfor ( experience of user.workExperience) {\nawait driver.sleep(1000);  \n// Step 5: Fill and submit the job experience form for each experience entry and save them\nfor (const experience of user.workExperience) {\nconst addExperienceButton = await driver.wait(\n    until.elementLocated(By.xpath('//button[@class=\"add-button\" and text()=\"+ Add Experience\"]')),\n    10000\n);\nawait addExperienceButton.click();\nif (experience.JobTitle) {\n    const jobTitleInput = await driver.findElement(By.xpath('//label[text()=\"Job Title\"]/following-sibling::input'));\n    await jobTitleInput.sendKeys(experience.JobTitle);\n}\nif (experience.organizationName) {\n    const orgNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n    await orgNameInput.sendKeys(experience.organizationName);\n}\nif (experience.startDate) {\n    const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n    await startDateInput.sendKeys(experience.startDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.endDate) {\n    const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n    await endDateInput.sendKeys(experience.endDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.description) {\n    const descriptionInput = await driver.findElement(By.xpath('//label[text()=\"Description\"]/following-sibling::textarea'));\n    await descriptionInput.sendKeys(experience.description);\n}\n    \n//save the education entries\nconst saveBtn = await driver.findElement(By.css('button.save-button'));\nawait saveBtn.click();\n\n        }\n}",
              "err": {},
              "uuid": "81899f45-6c98-48d4-b024-61297000e4f1",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 5",
              "fullTitle": "Add Job Experience Functionality Test Test Case 5",
              "timedOut": false,
              "duration": 9315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToPage(LOGIN_URL);\n// Enter login credentials\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();            \n\n// step 3: Verify that the user is redirected to the dashboard after login.\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n// Step 4: Navigate to experience page\nawait navigateToPage(EXPERIENCE_URL);\nawait driver.sleep(1000); \nfor ( experience of user.workExperience) {\nawait driver.sleep(1000);  \n// Step 5: Fill and submit the job experience form for each experience entry and save them\nfor (const experience of user.workExperience) {\nconst addExperienceButton = await driver.wait(\n    until.elementLocated(By.xpath('//button[@class=\"add-button\" and text()=\"+ Add Experience\"]')),\n    10000\n);\nawait addExperienceButton.click();\nif (experience.JobTitle) {\n    const jobTitleInput = await driver.findElement(By.xpath('//label[text()=\"Job Title\"]/following-sibling::input'));\n    await jobTitleInput.sendKeys(experience.JobTitle);\n}\nif (experience.organizationName) {\n    const orgNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n    await orgNameInput.sendKeys(experience.organizationName);\n}\nif (experience.startDate) {\n    const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n    await startDateInput.sendKeys(experience.startDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.endDate) {\n    const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n    await endDateInput.sendKeys(experience.endDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.description) {\n    const descriptionInput = await driver.findElement(By.xpath('//label[text()=\"Description\"]/following-sibling::textarea'));\n    await descriptionInput.sendKeys(experience.description);\n}\n    \n//save the education entries\nconst saveBtn = await driver.findElement(By.css('button.save-button'));\nawait saveBtn.click();\n\n        }\n}",
              "err": {},
              "uuid": "a68f5d13-e70f-469d-a354-acf6abf5b2de",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 6",
              "fullTitle": "Add Job Experience Functionality Test Test Case 6",
              "timedOut": false,
              "duration": 9360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToPage(LOGIN_URL);\n// Enter login credentials\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();            \n\n// step 3: Verify that the user is redirected to the dashboard after login.\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n// Step 4: Navigate to experience page\nawait navigateToPage(EXPERIENCE_URL);\nawait driver.sleep(1000); \nfor ( experience of user.workExperience) {\nawait driver.sleep(1000);  \n// Step 5: Fill and submit the job experience form for each experience entry and save them\nfor (const experience of user.workExperience) {\nconst addExperienceButton = await driver.wait(\n    until.elementLocated(By.xpath('//button[@class=\"add-button\" and text()=\"+ Add Experience\"]')),\n    10000\n);\nawait addExperienceButton.click();\nif (experience.JobTitle) {\n    const jobTitleInput = await driver.findElement(By.xpath('//label[text()=\"Job Title\"]/following-sibling::input'));\n    await jobTitleInput.sendKeys(experience.JobTitle);\n}\nif (experience.organizationName) {\n    const orgNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n    await orgNameInput.sendKeys(experience.organizationName);\n}\nif (experience.startDate) {\n    const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n    await startDateInput.sendKeys(experience.startDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.endDate) {\n    const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n    await endDateInput.sendKeys(experience.endDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.description) {\n    const descriptionInput = await driver.findElement(By.xpath('//label[text()=\"Description\"]/following-sibling::textarea'));\n    await descriptionInput.sendKeys(experience.description);\n}\n    \n//save the education entries\nconst saveBtn = await driver.findElement(By.css('button.save-button'));\nawait saveBtn.click();\n\n        }\n}",
              "err": {},
              "uuid": "11fe9b64-b91f-4593-99fa-d3895f79864b",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 7",
              "fullTitle": "Add Job Experience Functionality Test Test Case 7",
              "timedOut": false,
              "duration": 9418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToPage(LOGIN_URL);\n// Enter login credentials\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();            \n\n// step 3: Verify that the user is redirected to the dashboard after login.\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();   \nassert.strictEqual(currentUrl, DASHBOARD_URL, \"User should be directed to Job Application page after successful login\");\n// Step 4: Navigate to experience page\nawait navigateToPage(EXPERIENCE_URL);\nawait driver.sleep(1000); \nfor ( experience of user.workExperience) {\nawait driver.sleep(1000);  \n// Step 5: Fill and submit the job experience form for each experience entry and save them\nfor (const experience of user.workExperience) {\nconst addExperienceButton = await driver.wait(\n    until.elementLocated(By.xpath('//button[@class=\"add-button\" and text()=\"+ Add Experience\"]')),\n    10000\n);\nawait addExperienceButton.click();\nif (experience.JobTitle) {\n    const jobTitleInput = await driver.findElement(By.xpath('//label[text()=\"Job Title\"]/following-sibling::input'));\n    await jobTitleInput.sendKeys(experience.JobTitle);\n}\nif (experience.organizationName) {\n    const orgNameInput = await driver.findElement(By.xpath('//label[text()=\"Organization Name\"]/following-sibling::input'));\n    await orgNameInput.sendKeys(experience.organizationName);\n}\nif (experience.startDate) {\n    const startDateInput = await driver.findElement(By.xpath('//label[text()=\"Start Date\"]/following-sibling::input[@type=\"date\"]'));\n    await startDateInput.sendKeys(experience.startDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.endDate) {\n    const endDateInput = await driver.findElement(By.xpath('//label[text()=\"End Date\"]/following-sibling::input[@type=\"date\"]'));\n    await endDateInput.sendKeys(experience.endDate); // Send the formatted date (yyyy-mm-dd)\n}\n\nif (experience.description) {\n    const descriptionInput = await driver.findElement(By.xpath('//label[text()=\"Description\"]/following-sibling::textarea'));\n    await descriptionInput.sendKeys(experience.description);\n}\n    \n//save the education entries\nconst saveBtn = await driver.findElement(By.css('button.save-button'));\nawait saveBtn.click();\n\n        }\n}",
              "err": {},
              "uuid": "3c1625a6-d10d-4add-a334-fb52f172a2dd",
              "parentUUID": "8957115a-5205-4930-b5a8-8eaa2664d0d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f464a3a6-22c3-4c3d-9e29-ac473a9f009b",
            "fa48e0e0-3d9b-422b-8109-09333cb8bd43",
            "8f6c2f2a-8e84-4f5d-af74-90f20f94c1d2",
            "81899f45-6c98-48d4-b024-61297000e4f1",
            "a68f5d13-e70f-469d-a354-acf6abf5b2de",
            "11fe9b64-b91f-4593-99fa-d3895f79864b",
            "3c1625a6-d10d-4add-a334-fb52f172a2dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 63648,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5efb88f0-7382-4ba5-96e9-8d5b1fd0539f",
          "title": "Generate Resume and Cover Letter Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\generate_resume_coverletter_test.js",
          "file": "\\generate_resume_coverletter_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Generate Resume and Cover Letter Functionality Test\"",
              "fullTitle": "Generate Resume and Cover Letter Functionality Test \"before all\" hook in \"Generate Resume and Cover Letter Functionality Test\"",
              "timedOut": false,
              "duration": 952,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing the WebDriver:', error);\n}",
              "err": {},
              "uuid": "da5d678e-8dd0-468d-8840-0fbe78d73522",
              "parentUUID": "5efb88f0-7382-4ba5-96e9-8d5b1fd0539f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Generate Resume and Cover Letter Functionality Test\"",
              "fullTitle": "Generate Resume and Cover Letter Functionality Test \"after all\" hook in \"Generate Resume and Cover Letter Functionality Test\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "a02dcf42-a723-45dd-bc46-1f374be90974",
              "parentUUID": "5efb88f0-7382-4ba5-96e9-8d5b1fd0539f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Use case 1: ",
              "fullTitle": "Generate Resume and Cover Letter Functionality Test Use case 1: ",
              "timedOut": false,
              "duration": 9761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page and log in with the current user's credentials\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n//Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();    \n// Step 3: Verify the user is redirected to the dashboard page after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, APPLICATION_URL, `User cannot login with these credentials to generate cover letter and resume.`);\n// Step 4: Navigate to the job application page\nawait navigateToApplicationPage();\n// Step 5: Fill out the job application form with the user's job-related data\nawait driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\nawait driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Job description / information... (required)\"]')).sendKeys(user.description);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional). This prompt will help us tailor your application to your needs.\"]')).sendKeys(user.additionalInformation);\n\n// Step 6: Click the \"Generate\" button to create the resume\nconst generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\nawait generateButton.click();\n// Step 7: Verify that the generated resume content appears on the page\nconst generatedContent = await driver.wait(\n    until.elementLocated(By.css('.generated-content')), 5000\n);\nawait driver.sleep(6000);\nconst generatedText = await generatedContent.getText();\nconst len = generatedText.length;\nif(generatedText.length == 0){\nassert.StrictEqual(generatedText, len, \"Failed to generate content\"\n);\n        }",
              "err": {},
              "uuid": "14dc610a-0800-47b4-80b2-811a44183c17",
              "parentUUID": "5efb88f0-7382-4ba5-96e9-8d5b1fd0539f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use case 2: ",
              "fullTitle": "Generate Resume and Cover Letter Functionality Test Use case 2: ",
              "timedOut": false,
              "duration": 13250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page and log in with the current user's credentials\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n//Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();    \n// Step 3: Verify the user is redirected to the dashboard page after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, APPLICATION_URL, `User cannot login with these credentials to generate cover letter and resume.`);\n// Step 4: Navigate to the job application page\nawait navigateToApplicationPage();\n// Step 5: Fill out the job application form with the user's job-related data\nawait driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\nawait driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Job description / information... (required)\"]')).sendKeys(user.description);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional). This prompt will help us tailor your application to your needs.\"]')).sendKeys(user.additionalInformation);\n\n// Step 6: Click the \"Generate\" button to create the resume\nconst generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\nawait generateButton.click();\n// Step 7: Verify that the generated resume content appears on the page\nconst generatedContent = await driver.wait(\n    until.elementLocated(By.css('.generated-content')), 5000\n);\nawait driver.sleep(6000);\nconst generatedText = await generatedContent.getText();\nconst len = generatedText.length;\nif(generatedText.length == 0){\nassert.StrictEqual(generatedText, len, \"Failed to generate content\"\n);\n        }",
              "err": {},
              "uuid": "0e6d5aa3-e7be-4f1a-99e8-d1c2a7ba07a3",
              "parentUUID": "5efb88f0-7382-4ba5-96e9-8d5b1fd0539f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use case 3: ",
              "fullTitle": "Generate Resume and Cover Letter Functionality Test Use case 3: ",
              "timedOut": false,
              "duration": 13098,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page and log in with the current user's credentials\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n//Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();    \n// Step 3: Verify the user is redirected to the dashboard page after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, APPLICATION_URL, `User cannot login with these credentials to generate cover letter and resume.`);\n// Step 4: Navigate to the job application page\nawait navigateToApplicationPage();\n// Step 5: Fill out the job application form with the user's job-related data\nawait driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\nawait driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Job description / information... (required)\"]')).sendKeys(user.description);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional). This prompt will help us tailor your application to your needs.\"]')).sendKeys(user.additionalInformation);\n\n// Step 6: Click the \"Generate\" button to create the resume\nconst generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\nawait generateButton.click();\n// Step 7: Verify that the generated resume content appears on the page\nconst generatedContent = await driver.wait(\n    until.elementLocated(By.css('.generated-content')), 5000\n);\nawait driver.sleep(6000);\nconst generatedText = await generatedContent.getText();\nconst len = generatedText.length;\nif(generatedText.length == 0){\nassert.StrictEqual(generatedText, len, \"Failed to generate content\"\n);\n        }",
              "err": {},
              "uuid": "d291eb42-707a-44ab-9914-94a57cf05e6e",
              "parentUUID": "5efb88f0-7382-4ba5-96e9-8d5b1fd0539f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use case 4: ",
              "fullTitle": "Generate Resume and Cover Letter Functionality Test Use case 4: ",
              "timedOut": false,
              "duration": 13125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page and log in with the current user's credentials\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n//Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();    \n// Step 3: Verify the user is redirected to the dashboard page after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, APPLICATION_URL, `User cannot login with these credentials to generate cover letter and resume.`);\n// Step 4: Navigate to the job application page\nawait navigateToApplicationPage();\n// Step 5: Fill out the job application form with the user's job-related data\nawait driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\nawait driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Job description / information... (required)\"]')).sendKeys(user.description);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional). This prompt will help us tailor your application to your needs.\"]')).sendKeys(user.additionalInformation);\n\n// Step 6: Click the \"Generate\" button to create the resume\nconst generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\nawait generateButton.click();\n// Step 7: Verify that the generated resume content appears on the page\nconst generatedContent = await driver.wait(\n    until.elementLocated(By.css('.generated-content')), 5000\n);\nawait driver.sleep(6000);\nconst generatedText = await generatedContent.getText();\nconst len = generatedText.length;\nif(generatedText.length == 0){\nassert.StrictEqual(generatedText, len, \"Failed to generate content\"\n);\n        }",
              "err": {},
              "uuid": "ec0fe8c1-767c-4bdc-9471-72255b3a2f55",
              "parentUUID": "5efb88f0-7382-4ba5-96e9-8d5b1fd0539f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use case 5: ",
              "fullTitle": "Generate Resume and Cover Letter Functionality Test Use case 5: ",
              "timedOut": false,
              "duration": 13090,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Navigate to the login page and log in with the current user's credentials\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n//Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();    \n// Step 3: Verify the user is redirected to the dashboard page after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, APPLICATION_URL, `User cannot login with these credentials to generate cover letter and resume.`);\n// Step 4: Navigate to the job application page\nawait navigateToApplicationPage();\n// Step 5: Fill out the job application form with the user's job-related data\nawait driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\nawait driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Job description / information... (required)\"]')).sendKeys(user.description);\nawait driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional). This prompt will help us tailor your application to your needs.\"]')).sendKeys(user.additionalInformation);\n\n// Step 6: Click the \"Generate\" button to create the resume\nconst generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\nawait generateButton.click();\n// Step 7: Verify that the generated resume content appears on the page\nconst generatedContent = await driver.wait(\n    until.elementLocated(By.css('.generated-content')), 5000\n);\nawait driver.sleep(6000);\nconst generatedText = await generatedContent.getText();\nconst len = generatedText.length;\nif(generatedText.length == 0){\nassert.StrictEqual(generatedText, len, \"Failed to generate content\"\n);\n        }",
              "err": {},
              "uuid": "e368bea1-3c2d-4342-aa39-51e6164f9c56",
              "parentUUID": "5efb88f0-7382-4ba5-96e9-8d5b1fd0539f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14dc610a-0800-47b4-80b2-811a44183c17",
            "0e6d5aa3-e7be-4f1a-99e8-d1c2a7ba07a3",
            "d291eb42-707a-44ab-9914-94a57cf05e6e",
            "ec0fe8c1-767c-4bdc-9471-72255b3a2f55",
            "e368bea1-3c2d-4342-aa39-51e6164f9c56"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 62324,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
          "title": "Delete Experience from User Profile Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\delete_experience_test.js",
          "file": "\\delete_experience_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete Experience from User Profile Functionality Test\"",
              "fullTitle": "Delete Experience from User Profile Functionality Test \"before all\" hook in \"Delete Experience from User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 953,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "d09432f3-0f68-43d7-b060-da3526059fbc",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Delete Experience from User Profile Functionality Test\"",
              "fullTitle": "Delete Experience from User Profile Functionality Test \"after all\" hook in \"Delete Experience from User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "c209176c-c64b-4a87-ab26-1c8526cce261",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Delete Experience from User Profile Functionality Test\"",
              "fullTitle": "Delete Experience from User Profile Functionality Test \"after each\" hook in \"Delete Experience from User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 5064,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "432c7743-ef47-4287-9e27-8ff5c8d0edc3",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Test case  1",
              "fullTitle": "Delete Experience from User Profile Functionality Test Test case  1",
              "timedOut": false,
              "duration": 3398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\nawait navigateToLoginPage();\n// Step 2: Log in using valid credentials from the Profile.json file\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \nawait driver.sleep(600);\n// Step 3: Verify that the user is redirected to the dashboard after login\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot add their job experience because they cannot log in with these credentials.`);\n    \n// Step 4: Navigate to the experience page\nawait navigateToExperiencePage();\n\n// Step 5: Attempt to delete a job experience by clicking the delete button\nawait driver.sleep(500);\ntry{\n//  step 6. Verify that the experience is present to delete.\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n        \nassert.strictEqual(!!deleteButton, True, 'There is no experiencce to remove');\nawait deleteButton.click();\n}\ncatch{\n    await driver.sleep(500);\n}",
              "err": {},
              "uuid": "75a86827-8ca6-41f2-8559-6ed989f5d324",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case  2",
              "fullTitle": "Delete Experience from User Profile Functionality Test Test case  2",
              "timedOut": false,
              "duration": 2488,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\nawait navigateToLoginPage();\n// Step 2: Log in using valid credentials from the Profile.json file\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \nawait driver.sleep(600);\n// Step 3: Verify that the user is redirected to the dashboard after login\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot add their job experience because they cannot log in with these credentials.`);\n    \n// Step 4: Navigate to the experience page\nawait navigateToExperiencePage();\n\n// Step 5: Attempt to delete a job experience by clicking the delete button\nawait driver.sleep(500);\ntry{\n//  step 6. Verify that the experience is present to delete.\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n        \nassert.strictEqual(!!deleteButton, True, 'There is no experiencce to remove');\nawait deleteButton.click();\n}\ncatch{\n    await driver.sleep(500);\n}",
              "err": {},
              "uuid": "714be6c1-baf1-4aea-b315-86acf17ee6a3",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case  3",
              "fullTitle": "Delete Experience from User Profile Functionality Test Test case  3",
              "timedOut": false,
              "duration": 2254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\nawait navigateToLoginPage();\n// Step 2: Log in using valid credentials from the Profile.json file\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \nawait driver.sleep(600);\n// Step 3: Verify that the user is redirected to the dashboard after login\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot add their job experience because they cannot log in with these credentials.`);\n    \n// Step 4: Navigate to the experience page\nawait navigateToExperiencePage();\n\n// Step 5: Attempt to delete a job experience by clicking the delete button\nawait driver.sleep(500);\ntry{\n//  step 6. Verify that the experience is present to delete.\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n        \nassert.strictEqual(!!deleteButton, True, 'There is no experiencce to remove');\nawait deleteButton.click();\n}\ncatch{\n    await driver.sleep(500);\n}",
              "err": {},
              "uuid": "ddf0c704-8bde-41fc-aba4-6ed3eec77769",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case  4",
              "fullTitle": "Delete Experience from User Profile Functionality Test Test case  4",
              "timedOut": false,
              "duration": 2289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\nawait navigateToLoginPage();\n// Step 2: Log in using valid credentials from the Profile.json file\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \nawait driver.sleep(600);\n// Step 3: Verify that the user is redirected to the dashboard after login\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot add their job experience because they cannot log in with these credentials.`);\n    \n// Step 4: Navigate to the experience page\nawait navigateToExperiencePage();\n\n// Step 5: Attempt to delete a job experience by clicking the delete button\nawait driver.sleep(500);\ntry{\n//  step 6. Verify that the experience is present to delete.\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n        \nassert.strictEqual(!!deleteButton, True, 'There is no experiencce to remove');\nawait deleteButton.click();\n}\ncatch{\n    await driver.sleep(500);\n}",
              "err": {},
              "uuid": "e96d97c7-7b71-4963-ae2e-06918590eb05",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case  5",
              "fullTitle": "Delete Experience from User Profile Functionality Test Test case  5",
              "timedOut": false,
              "duration": 2278,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\nawait navigateToLoginPage();\n// Step 2: Log in using valid credentials from the Profile.json file\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \nawait driver.sleep(600);\n// Step 3: Verify that the user is redirected to the dashboard after login\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot add their job experience because they cannot log in with these credentials.`);\n    \n// Step 4: Navigate to the experience page\nawait navigateToExperiencePage();\n\n// Step 5: Attempt to delete a job experience by clicking the delete button\nawait driver.sleep(500);\ntry{\n//  step 6. Verify that the experience is present to delete.\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n        \nassert.strictEqual(!!deleteButton, True, 'There is no experiencce to remove');\nawait deleteButton.click();\n}\ncatch{\n    await driver.sleep(500);\n}",
              "err": {},
              "uuid": "67575046-aab1-4d72-a75e-1dd2cabbd0c6",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case  6",
              "fullTitle": "Delete Experience from User Profile Functionality Test Test case  6",
              "timedOut": false,
              "duration": 2294,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\nawait navigateToLoginPage();\n// Step 2: Log in using valid credentials from the Profile.json file\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \nawait driver.sleep(600);\n// Step 3: Verify that the user is redirected to the dashboard after login\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot add their job experience because they cannot log in with these credentials.`);\n    \n// Step 4: Navigate to the experience page\nawait navigateToExperiencePage();\n\n// Step 5: Attempt to delete a job experience by clicking the delete button\nawait driver.sleep(500);\ntry{\n//  step 6. Verify that the experience is present to delete.\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n        \nassert.strictEqual(!!deleteButton, True, 'There is no experiencce to remove');\nawait deleteButton.click();\n}\ncatch{\n    await driver.sleep(500);\n}",
              "err": {},
              "uuid": "7fd868a4-87cb-401b-9c4b-f87c79effd95",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case  7",
              "fullTitle": "Delete Experience from User Profile Functionality Test Test case  7",
              "timedOut": false,
              "duration": 2292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\nawait navigateToLoginPage();\n// Step 2: Log in using valid credentials from the Profile.json file\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();             \n \nawait driver.sleep(600);\n// Step 3: Verify that the user is redirected to the dashboard after login\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot add their job experience because they cannot log in with these credentials.`);\n    \n// Step 4: Navigate to the experience page\nawait navigateToExperiencePage();\n\n// Step 5: Attempt to delete a job experience by clicking the delete button\nawait driver.sleep(500);\ntry{\n//  step 6. Verify that the experience is present to delete.\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n        \nassert.strictEqual(!!deleteButton, True, 'There is no experiencce to remove');\nawait deleteButton.click();\n}\ncatch{\n    await driver.sleep(500);\n}",
              "err": {},
              "uuid": "43aac1bb-0f3b-4500-979f-a389350f4fed",
              "parentUUID": "2d48af9a-7ba3-4aa5-a832-56c7ef3d1ca6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75a86827-8ca6-41f2-8559-6ed989f5d324",
            "714be6c1-baf1-4aea-b315-86acf17ee6a3",
            "ddf0c704-8bde-41fc-aba4-6ed3eec77769",
            "e96d97c7-7b71-4963-ae2e-06918590eb05",
            "67575046-aab1-4d72-a75e-1dd2cabbd0c6",
            "7fd868a4-87cb-401b-9c4b-f87c79effd95",
            "43aac1bb-0f3b-4500-979f-a389350f4fed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17293,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
          "title": "User Profile Deletion Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\delete_user_profile_test.js",
          "file": "\\delete_user_profile_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Profile Deletion Functionality Test\"",
              "fullTitle": "User Profile Deletion Functionality Test \"before all\" hook in \"User Profile Deletion Functionality Test\"",
              "timedOut": false,
              "duration": 957,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "00125122-0430-45a7-8f95-284ea44d28e9",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Profile Deletion Functionality Test\"",
              "fullTitle": "User Profile Deletion Functionality Test \"after all\" hook in \"User Profile Deletion Functionality Test\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "0d31a409-2677-4945-8e0f-8b6c6379f5b2",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Profile Deletion Functionality Test\"",
              "fullTitle": "User Profile Deletion Functionality Test \"after each\" hook in \"User Profile Deletion Functionality Test\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "b3126c65-d572-4d1d-8f7c-8116f2f0a487",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Test case 1",
              "fullTitle": "User Profile Deletion Functionality Test Test case 1",
              "timedOut": false,
              "duration": 6377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();   \n// Step 3: Verify that the user is redirected to the dashboard after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot log in, user does not exist`);\n// Step 4: Navigate to the profile page\nawait navigateToProfilePage();\nawait driver.sleep(2000); \n\n// Step 5: Click the delete button to delete the user profile\nconst deleteButton = await driver.wait(until.elementLocated(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]')), TIMEOUT);\nawait deleteButton.click();\n\n// Step 6: Handle the confirmation alert and accept the deletion\nawait driver.wait(until.alertIsPresent(), 5000); // Wait for the alert pop-up to appear\nconst alert = await driver.switchTo().alert();\nawait alert.accept();\n\n// Step 7: Verify that the user is redirected to the homepage after deletion\nawait driver.sleep(500);\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(HOMEPAGE_URL, currentUrl2, \"After successful deletion of the user, the page should be directed to the homepage\");",
              "err": {},
              "uuid": "4455de3e-aa1f-4e45-bdd7-c8b60f54c007",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case 2",
              "fullTitle": "User Profile Deletion Functionality Test Test case 2",
              "timedOut": false,
              "duration": 4344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();   \n// Step 3: Verify that the user is redirected to the dashboard after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot log in, user does not exist`);\n// Step 4: Navigate to the profile page\nawait navigateToProfilePage();\nawait driver.sleep(2000); \n\n// Step 5: Click the delete button to delete the user profile\nconst deleteButton = await driver.wait(until.elementLocated(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]')), TIMEOUT);\nawait deleteButton.click();\n\n// Step 6: Handle the confirmation alert and accept the deletion\nawait driver.wait(until.alertIsPresent(), 5000); // Wait for the alert pop-up to appear\nconst alert = await driver.switchTo().alert();\nawait alert.accept();\n\n// Step 7: Verify that the user is redirected to the homepage after deletion\nawait driver.sleep(500);\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(HOMEPAGE_URL, currentUrl2, \"After successful deletion of the user, the page should be directed to the homepage\");",
              "err": {},
              "uuid": "9f161c9c-dc6a-4817-ad7f-cba7be9be90b",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case 3",
              "fullTitle": "User Profile Deletion Functionality Test Test case 3",
              "timedOut": false,
              "duration": 4396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();   \n// Step 3: Verify that the user is redirected to the dashboard after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot log in, user does not exist`);\n// Step 4: Navigate to the profile page\nawait navigateToProfilePage();\nawait driver.sleep(2000); \n\n// Step 5: Click the delete button to delete the user profile\nconst deleteButton = await driver.wait(until.elementLocated(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]')), TIMEOUT);\nawait deleteButton.click();\n\n// Step 6: Handle the confirmation alert and accept the deletion\nawait driver.wait(until.alertIsPresent(), 5000); // Wait for the alert pop-up to appear\nconst alert = await driver.switchTo().alert();\nawait alert.accept();\n\n// Step 7: Verify that the user is redirected to the homepage after deletion\nawait driver.sleep(500);\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(HOMEPAGE_URL, currentUrl2, \"After successful deletion of the user, the page should be directed to the homepage\");",
              "err": {},
              "uuid": "23ad3a71-cd62-45ea-b422-19f5ab8c4807",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case 4",
              "fullTitle": "User Profile Deletion Functionality Test Test case 4",
              "timedOut": false,
              "duration": 4327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();   \n// Step 3: Verify that the user is redirected to the dashboard after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot log in, user does not exist`);\n// Step 4: Navigate to the profile page\nawait navigateToProfilePage();\nawait driver.sleep(2000); \n\n// Step 5: Click the delete button to delete the user profile\nconst deleteButton = await driver.wait(until.elementLocated(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]')), TIMEOUT);\nawait deleteButton.click();\n\n// Step 6: Handle the confirmation alert and accept the deletion\nawait driver.wait(until.alertIsPresent(), 5000); // Wait for the alert pop-up to appear\nconst alert = await driver.switchTo().alert();\nawait alert.accept();\n\n// Step 7: Verify that the user is redirected to the homepage after deletion\nawait driver.sleep(500);\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(HOMEPAGE_URL, currentUrl2, \"After successful deletion of the user, the page should be directed to the homepage\");",
              "err": {},
              "uuid": "0c150324-3a65-4610-9971-69cf551fa352",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case 5",
              "fullTitle": "User Profile Deletion Functionality Test Test case 5",
              "timedOut": false,
              "duration": 4246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();   \n// Step 3: Verify that the user is redirected to the dashboard after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot log in, user does not exist`);\n// Step 4: Navigate to the profile page\nawait navigateToProfilePage();\nawait driver.sleep(2000); \n\n// Step 5: Click the delete button to delete the user profile\nconst deleteButton = await driver.wait(until.elementLocated(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]')), TIMEOUT);\nawait deleteButton.click();\n\n// Step 6: Handle the confirmation alert and accept the deletion\nawait driver.wait(until.alertIsPresent(), 5000); // Wait for the alert pop-up to appear\nconst alert = await driver.switchTo().alert();\nawait alert.accept();\n\n// Step 7: Verify that the user is redirected to the homepage after deletion\nawait driver.sleep(500);\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(HOMEPAGE_URL, currentUrl2, \"After successful deletion of the user, the page should be directed to the homepage\");",
              "err": {},
              "uuid": "5105ff03-513d-4cec-8488-73e3ced7419e",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case 6",
              "fullTitle": "User Profile Deletion Functionality Test Test case 6",
              "timedOut": false,
              "duration": 4362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();   \n// Step 3: Verify that the user is redirected to the dashboard after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot log in, user does not exist`);\n// Step 4: Navigate to the profile page\nawait navigateToProfilePage();\nawait driver.sleep(2000); \n\n// Step 5: Click the delete button to delete the user profile\nconst deleteButton = await driver.wait(until.elementLocated(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]')), TIMEOUT);\nawait deleteButton.click();\n\n// Step 6: Handle the confirmation alert and accept the deletion\nawait driver.wait(until.alertIsPresent(), 5000); // Wait for the alert pop-up to appear\nconst alert = await driver.switchTo().alert();\nawait alert.accept();\n\n// Step 7: Verify that the user is redirected to the homepage after deletion\nawait driver.sleep(500);\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(HOMEPAGE_URL, currentUrl2, \"After successful deletion of the user, the page should be directed to the homepage\");",
              "err": {},
              "uuid": "698b5cf0-0154-4cff-a8ae-27245a1afbb0",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test case 7",
              "fullTitle": "User Profile Deletion Functionality Test Test case 7",
              "timedOut": false,
              "duration": 4276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Step 1: Ensure the user is logged out if already logged in\nawait logoutIfLoggedIn();\n// Step 2: Log in using valid credentials from the Profile.json file\nawait navigateToLoginPage();\nconst emailInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Email\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(emailInput), 5000);\nawait emailInput.sendKeys(user.emailAddress);\n        \n// Wait for the password field to appear and send password\nconst passwordInput = await driver.wait(\n    until.elementLocated(By.xpath('//input[@placeholder=\"Password\"]')),\n    5000\n);\nawait driver.wait(until.elementIsVisible(passwordInput), 5000);\nawait passwordInput.sendKeys(user.password);\n// Step 5: Submit the login form\nconst submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\nawait submitButton.click();   \n// Step 3: Verify that the user is redirected to the dashboard after login\nawait driver.sleep(1000);\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl, DASHBOARD_URL, `User cannot log in, user does not exist`);\n// Step 4: Navigate to the profile page\nawait navigateToProfilePage();\nawait driver.sleep(2000); \n\n// Step 5: Click the delete button to delete the user profile\nconst deleteButton = await driver.wait(until.elementLocated(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]')), TIMEOUT);\nawait deleteButton.click();\n\n// Step 6: Handle the confirmation alert and accept the deletion\nawait driver.wait(until.alertIsPresent(), 5000); // Wait for the alert pop-up to appear\nconst alert = await driver.switchTo().alert();\nawait alert.accept();\n\n// Step 7: Verify that the user is redirected to the homepage after deletion\nawait driver.sleep(500);\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(HOMEPAGE_URL, currentUrl2, \"After successful deletion of the user, the page should be directed to the homepage\");",
              "err": {},
              "uuid": "4448e3a5-7b52-41c7-968e-98ef0c48e91d",
              "parentUUID": "3a565ae4-e669-4f9c-9608-65b9afeafef3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4455de3e-aa1f-4e45-bdd7-c8b60f54c007",
            "9f161c9c-dc6a-4817-ad7f-cba7be9be90b",
            "23ad3a71-cd62-45ea-b422-19f5ab8c4807",
            "0c150324-3a65-4610-9971-69cf551fa352",
            "5105ff03-513d-4cec-8488-73e3ced7419e",
            "698b5cf0-0154-4cff-a8ae-27245a1afbb0",
            "4448e3a5-7b52-41c7-968e-98ef0c48e91d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32328,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}