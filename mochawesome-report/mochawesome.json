{
  "stats": {
    "suites": 5,
    "tests": 25,
    "passes": 10,
    "pending": 0,
    "failures": 15,
    "start": "2024-11-18T22:06:02.571Z",
    "end": "2024-11-18T22:07:39.037Z",
    "duration": 96466,
    "testsRegistered": 25,
    "passPercent": 40,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c1020e0e-5130-4680-ac56-ba93adfe3896",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
          "title": "User Registration Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\user_registration_test.js",
          "file": "\\test\\user_registration_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"before all\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 1211,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "fcff9c9d-1f64-49eb-b3ff-cc61f8cfe3ae",
              "parentUUID": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"after all\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 67,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "ef6891bd-9921-462e-9270-1d404874d80a",
              "parentUUID": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"after each\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "cdfcd7be-0117-4230-b7ce-f59159b4d348",
              "parentUUID": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Test Case 1: Login with provided credentials",
              "fullTitle": "User Registration Functionality Test Test Case 1: Login with provided credentials",
              "timedOut": false,
              "duration": 1132,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        const currentUrl = await driver.getCurrentUrl();\n        assert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful sign in user should be able to go to user profile page\")\n        // Check if an error message appears or redirect to a success page\n    //     const errorMessage = await driver.findElements(By.css('.error-message'));\n    //     if (errorMessage.length) {\n    //         const errorText = await errorMessage[0].getText();\n    //         assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n    //     } else                 \n    //     if (currentUrl === DASHBOARD_URL) {\n    //         assert.strictEqual(currentUrl, \"Login successful \", 'Moved to profile page');\n    // }\n    //     else {\n    //         const currentUrl = await driver.getCurrentUrl();\n    //         assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n    //     }",
              "err": {
                "message": "AssertionError: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^\n    at Context.<anonymous> (test\\user_registration_test.js:66:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/registration\n+ http://localhost:3000/hire-wire-front-end/userprofile\n"
              },
              "uuid": "e91d13ec-c86f-4c46-86c4-334ee15321ed",
              "parentUUID": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 2: Login with provided credentials",
              "fullTitle": "User Registration Functionality Test Test Case 2: Login with provided credentials",
              "timedOut": false,
              "duration": 468,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        const currentUrl = await driver.getCurrentUrl();\n        assert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful sign in user should be able to go to user profile page\")\n        // Check if an error message appears or redirect to a success page\n    //     const errorMessage = await driver.findElements(By.css('.error-message'));\n    //     if (errorMessage.length) {\n    //         const errorText = await errorMessage[0].getText();\n    //         assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n    //     } else                 \n    //     if (currentUrl === DASHBOARD_URL) {\n    //         assert.strictEqual(currentUrl, \"Login successful \", 'Moved to profile page');\n    // }\n    //     else {\n    //         const currentUrl = await driver.getCurrentUrl();\n    //         assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n    //     }",
              "err": {
                "message": "AssertionError: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^\n    at Context.<anonymous> (test\\user_registration_test.js:66:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/registration\n+ http://localhost:3000/hire-wire-front-end/userprofile\n"
              },
              "uuid": "8bcebfb2-2f36-4874-bd0b-6b2111f67b48",
              "parentUUID": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 3: Login with provided credentials",
              "fullTitle": "User Registration Functionality Test Test Case 3: Login with provided credentials",
              "timedOut": false,
              "duration": 421,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        const currentUrl = await driver.getCurrentUrl();\n        assert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful sign in user should be able to go to user profile page\")\n        // Check if an error message appears or redirect to a success page\n    //     const errorMessage = await driver.findElements(By.css('.error-message'));\n    //     if (errorMessage.length) {\n    //         const errorText = await errorMessage[0].getText();\n    //         assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n    //     } else                 \n    //     if (currentUrl === DASHBOARD_URL) {\n    //         assert.strictEqual(currentUrl, \"Login successful \", 'Moved to profile page');\n    // }\n    //     else {\n    //         const currentUrl = await driver.getCurrentUrl();\n    //         assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n    //     }",
              "err": {
                "message": "AssertionError: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^\n    at Context.<anonymous> (test\\user_registration_test.js:66:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/registration\n+ http://localhost:3000/hire-wire-front-end/userprofile\n"
              },
              "uuid": "01baebe9-e0b0-415d-9353-a8a0a59f70e6",
              "parentUUID": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 4: Login with provided credentials",
              "fullTitle": "User Registration Functionality Test Test Case 4: Login with provided credentials",
              "timedOut": false,
              "duration": 439,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        const currentUrl = await driver.getCurrentUrl();\n        assert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful sign in user should be able to go to user profile page\")\n        // Check if an error message appears or redirect to a success page\n    //     const errorMessage = await driver.findElements(By.css('.error-message'));\n    //     if (errorMessage.length) {\n    //         const errorText = await errorMessage[0].getText();\n    //         assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n    //     } else                 \n    //     if (currentUrl === DASHBOARD_URL) {\n    //         assert.strictEqual(currentUrl, \"Login successful \", 'Moved to profile page');\n    // }\n    //     else {\n    //         const currentUrl = await driver.getCurrentUrl();\n    //         assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n    //     }",
              "err": {
                "message": "AssertionError: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^\n    at Context.<anonymous> (test\\user_registration_test.js:66:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/registration\n+ http://localhost:3000/hire-wire-front-end/userprofile\n"
              },
              "uuid": "2c19fa85-5523-4137-9028-9453b59edcea",
              "parentUUID": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 5: Login with provided credentials",
              "fullTitle": "User Registration Functionality Test Test Case 5: Login with provided credentials",
              "timedOut": false,
              "duration": 441,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        const currentUrl = await driver.getCurrentUrl();\n        assert.strictEqual(currentUrl, DASHBOARD_URL, \"After successful sign in user should be able to go to user profile page\")\n        // Check if an error message appears or redirect to a success page\n    //     const errorMessage = await driver.findElements(By.css('.error-message'));\n    //     if (errorMessage.length) {\n    //         const errorText = await errorMessage[0].getText();\n    //         assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n    //     } else                 \n    //     if (currentUrl === DASHBOARD_URL) {\n    //         assert.strictEqual(currentUrl, \"Login successful \", 'Moved to profile page');\n    // }\n    //     else {\n    //         const currentUrl = await driver.getCurrentUrl();\n    //         assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n    //     }",
              "err": {
                "message": "AssertionError: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: After successful sign in user should be able to go to user profile page\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/registration'\n- 'http://localhost:3000/hire-wire-front-end/userprofile'\n                                             ^\n    at Context.<anonymous> (test\\user_registration_test.js:66:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/registration\n+ http://localhost:3000/hire-wire-front-end/userprofile\n"
              },
              "uuid": "f044644b-08d7-4b4a-93ad-96f58df39ca1",
              "parentUUID": "ccabe15c-16a9-42e6-bcbd-b44ce4502db7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e91d13ec-c86f-4c46-86c4-334ee15321ed",
            "8bcebfb2-2f36-4874-bd0b-6b2111f67b48",
            "01baebe9-e0b0-415d-9353-a8a0a59f70e6",
            "2c19fa85-5523-4137-9028-9453b59edcea",
            "f044644b-08d7-4b4a-93ad-96f58df39ca1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2901,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0e358874-250e-4512-8640-c566fab3f6e3",
          "title": "Add Job Experience Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\add_job_experience_test.js",
          "file": "\\test\\add_job_experience_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Add Job Experience Functionality Test\"",
              "fullTitle": "Add Job Experience Functionality Test \"before all\" hook in \"Add Job Experience Functionality Test\"",
              "timedOut": false,
              "duration": 946,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "e178ae5c-992d-4ae4-b015-084134c70ffd",
              "parentUUID": "0e358874-250e-4512-8640-c566fab3f6e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Add Job Experience Functionality Test\"",
              "fullTitle": "Add Job Experience Functionality Test \"after all\" hook in \"Add Job Experience Functionality Test\"",
              "timedOut": false,
              "duration": 93,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "7bf5c571-1f45-48e2-b88d-0fa6cbbac1b6",
              "parentUUID": "0e358874-250e-4512-8640-c566fab3f6e3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Add Job Experience Functionality Test\"",
              "fullTitle": "Add Job Experience Functionality Test \"after each\" hook in \"Add Job Experience Functionality Test\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "1fd7063b-babb-48fc-a4c6-5a991d24eceb",
              "parentUUID": "0e358874-250e-4512-8640-c566fab3f6e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User Profile Testt Case 1",
              "fullTitle": "Add Job Experience Functionality Test User Profile Testt Case 1",
              "timedOut": false,
              "duration": 6222,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5201ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5201ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "136d4b53-e86b-40e9-8fb0-294d70de4168",
              "parentUUID": "0e358874-250e-4512-8640-c566fab3f6e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Testt Case 2",
              "fullTitle": "Add Job Experience Functionality Test User Profile Testt Case 2",
              "timedOut": false,
              "duration": 5577,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5143ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5143ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "eec1ca5d-ee77-4b57-8937-5271dbe72cb9",
              "parentUUID": "0e358874-250e-4512-8640-c566fab3f6e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Testt Case 3",
              "fullTitle": "Add Job Experience Functionality Test User Profile Testt Case 3",
              "timedOut": false,
              "duration": 5593,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5119ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5119ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "fbb932b6-0689-4c99-b333-c30ace9635fd",
              "parentUUID": "0e358874-250e-4512-8640-c566fab3f6e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Testt Case 4",
              "fullTitle": "Add Job Experience Functionality Test User Profile Testt Case 4",
              "timedOut": false,
              "duration": 5554,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5156ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5156ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "d2b76c2a-bbb2-4233-aa74-5bd28a3e53d3",
              "parentUUID": "0e358874-250e-4512-8640-c566fab3f6e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Testt Case 5",
              "fullTitle": "Add Job Experience Functionality Test User Profile Testt Case 5",
              "timedOut": false,
              "duration": 5506,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5135ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5135ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "d9c633b2-c52c-4be1-97e0-9c03bbfc39cc",
              "parentUUID": "0e358874-250e-4512-8640-c566fab3f6e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "136d4b53-e86b-40e9-8fb0-294d70de4168",
            "eec1ca5d-ee77-4b57-8937-5271dbe72cb9",
            "fbb932b6-0689-4c99-b333-c30ace9635fd",
            "d2b76c2a-bbb2-4233-aa74-5bd28a3e53d3",
            "d9c633b2-c52c-4be1-97e0-9c03bbfc39cc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 28452,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
          "title": "User Profile Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\edit_user_profile_test.js",
          "file": "\\test\\edit_user_profile_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"before all\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 927,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "e433ffdd-ece3-43ce-9fb1-7e7581e90870",
              "parentUUID": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"after all\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 46,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "2094146a-e3c0-479a-89d4-d5ed59f4ad41",
              "parentUUID": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"after each\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "09d0334f-a623-4a97-bbba-0d91d1e4dda4",
              "parentUUID": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User Profile Test 1",
              "fullTitle": "User Profile Functionality Test User Profile Test 1",
              "timedOut": false,
              "duration": 6126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}\n\n//get current url after update\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl2, currentUrl2, \"After Successful update should stay on same page\");",
              "err": {},
              "uuid": "ac464267-a2ed-4e1f-ae1d-e503e893ae3b",
              "parentUUID": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 2",
              "fullTitle": "User Profile Functionality Test User Profile Test 2",
              "timedOut": false,
              "duration": 5578,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}\n\n//get current url after update\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl2, currentUrl2, \"After Successful update should stay on same page\");",
              "err": {},
              "uuid": "61c016ed-e64e-4d14-bfeb-8bdb69de5cd4",
              "parentUUID": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 3",
              "fullTitle": "User Profile Functionality Test User Profile Test 3",
              "timedOut": false,
              "duration": 5643,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}\n\n//get current url after update\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl2, currentUrl2, \"After Successful update should stay on same page\");",
              "err": {},
              "uuid": "be70d2e2-fff8-4836-bddd-bb190c4e7015",
              "parentUUID": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 4",
              "fullTitle": "User Profile Functionality Test User Profile Test 4",
              "timedOut": false,
              "duration": 5595,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}\n\n//get current url after update\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl2, currentUrl2, \"After Successful update should stay on same page\");",
              "err": {},
              "uuid": "58977cca-be79-4046-8d2a-27dfd32d2e75",
              "parentUUID": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 5",
              "fullTitle": "User Profile Functionality Test User Profile Test 5",
              "timedOut": false,
              "duration": 5542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}\n\n//get current url after update\nconst currentUrl2 = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl2, currentUrl2, \"After Successful update should stay on same page\");",
              "err": {},
              "uuid": "e0d55e0d-bd01-4328-ae36-1a08bdf99d98",
              "parentUUID": "924c5470-0e17-4ff7-9ca3-e8bafaa093b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac464267-a2ed-4e1f-ae1d-e503e893ae3b",
            "61c016ed-e64e-4d14-bfeb-8bdb69de5cd4",
            "be70d2e2-fff8-4836-bddd-bb190c4e7015",
            "58977cca-be79-4046-8d2a-27dfd32d2e75",
            "e0d55e0d-bd01-4328-ae36-1a08bdf99d98"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28484,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4d50eb97-0060-4332-8dd2-a4955403751f",
          "title": "Delete EXperience from User Profile Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\delete_experience_test.js",
          "file": "\\test\\delete_experience_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete EXperience from User Profile Functionality Test\"",
              "fullTitle": "Delete EXperience from User Profile Functionality Test \"before all\" hook in \"Delete EXperience from User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 935,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "7b7d75f1-ff82-4397-8d92-14dbbdd15b3f",
              "parentUUID": "4d50eb97-0060-4332-8dd2-a4955403751f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Delete EXperience from User Profile Functionality Test\"",
              "fullTitle": "Delete EXperience from User Profile Functionality Test \"after all\" hook in \"Delete EXperience from User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 79,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "856c9458-4a26-4f55-a81e-3f5d63588cd0",
              "parentUUID": "4d50eb97-0060-4332-8dd2-a4955403751f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Delete EXperience from User Profile Functionality Test\"",
              "fullTitle": "Delete EXperience from User Profile Functionality Test \"after each\" hook in \"Delete EXperience from User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "e47e1228-f52c-4016-92dd-f951355493cc",
              "parentUUID": "4d50eb97-0060-4332-8dd2-a4955403751f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User  1",
              "fullTitle": "Delete EXperience from User Profile Functionality Test User  1",
              "timedOut": false,
              "duration": 6178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    // Navigate to profile page\n    await navigateToExperiencePage();\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "aa6cbcbc-2f1a-4a38-ad0c-76e078e371b3",
              "parentUUID": "4d50eb97-0060-4332-8dd2-a4955403751f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User  2",
              "fullTitle": "Delete EXperience from User Profile Functionality Test User  2",
              "timedOut": false,
              "duration": 5509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    // Navigate to profile page\n    await navigateToExperiencePage();\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "655988b2-dc68-4d4b-bfa5-6fa96a22b359",
              "parentUUID": "4d50eb97-0060-4332-8dd2-a4955403751f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User  3",
              "fullTitle": "Delete EXperience from User Profile Functionality Test User  3",
              "timedOut": false,
              "duration": 5571,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    // Navigate to profile page\n    await navigateToExperiencePage();\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "b4d108e1-bee4-44d3-a77d-f306a43880a9",
              "parentUUID": "4d50eb97-0060-4332-8dd2-a4955403751f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User  4",
              "fullTitle": "Delete EXperience from User Profile Functionality Test User  4",
              "timedOut": false,
              "duration": 5596,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    // Navigate to profile page\n    await navigateToExperiencePage();\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "0d094f6f-8cc8-472b-bb7b-fb3320679a95",
              "parentUUID": "4d50eb97-0060-4332-8dd2-a4955403751f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User  5",
              "fullTitle": "Delete EXperience from User Profile Functionality Test User  5",
              "timedOut": false,
              "duration": 5532,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    // Navigate to profile page\n    await navigateToExperiencePage();\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "0932ce44-ea34-4b28-bb32-8556b1280e49",
              "parentUUID": "4d50eb97-0060-4332-8dd2-a4955403751f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa6cbcbc-2f1a-4a38-ad0c-76e078e371b3",
            "655988b2-dc68-4d4b-bfa5-6fa96a22b359",
            "b4d108e1-bee4-44d3-a77d-f306a43880a9",
            "0d094f6f-8cc8-472b-bb7b-fb3320679a95",
            "0932ce44-ea34-4b28-bb32-8556b1280e49"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28386,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "88a28f2c-6652-45b3-bffa-965f738f39a9",
          "title": "User Profile Deletion Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\hire-wire-test-script\\test\\delete_user_profile_test.js",
          "file": "\\test\\delete_user_profile_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Profile Deletion Functionality Test\"",
              "fullTitle": "User Profile Deletion Functionality Test \"before all\" hook in \"User Profile Deletion Functionality Test\"",
              "timedOut": false,
              "duration": 894,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "768cdea0-18c6-45db-9561-94b55953cf6f",
              "parentUUID": "88a28f2c-6652-45b3-bffa-965f738f39a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Profile Deletion Functionality Test\"",
              "fullTitle": "User Profile Deletion Functionality Test \"after all\" hook in \"User Profile Deletion Functionality Test\"",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "9abfdd41-d420-48ad-8e8f-3e1b74cfbe54",
              "parentUUID": "88a28f2c-6652-45b3-bffa-965f738f39a9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Profile Deletion Functionality Test\"",
              "fullTitle": "User Profile Deletion Functionality Test \"after each\" hook in \"User Profile Deletion Functionality Test\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "c4fbe026-5824-4165-9220-d043152cb8f7",
              "parentUUID": "88a28f2c-6652-45b3-bffa-965f738f39a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User Profile Test 1",
              "fullTitle": "User Profile Deletion Functionality Test User Profile Test 1",
              "timedOut": false,
              "duration": 1003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n\n    const currentUrl = await driver.getCurrentUrl();\n    \n    // Assert exact match of current URL with the expected URL\n    assert.strictEqual(currentUrl, DASHBOARD_URL, `User ${index + 1} user can not log in, user does not exist`);\n    \n    // Navigate to profile page\n    await navigateToProfilePage();\n\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n    // Wait for the alert pop-up to appear\n    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    const alert = await driver.switchTo().alert();\n    \n    // Press the OK button on the alert\n    await alert.accept();\n    //get current url after deleetion\n    const currentUrl2 = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl, currentUrl2, \"After Successful deletion of user the page should be directed to homepage\");",
              "err": {
                "message": "AssertionError: User 1 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: User 1 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^\n    at Context.<anonymous> (test\\delete_user_profile_test.js:176:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/login\n+ http://localhost:3000/hire-wire-front-end/jobapplication\n"
              },
              "uuid": "8ccdf1fb-9b83-4f79-90ff-44596b77bbf3",
              "parentUUID": "88a28f2c-6652-45b3-bffa-965f738f39a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 2",
              "fullTitle": "User Profile Deletion Functionality Test User Profile Test 2",
              "timedOut": false,
              "duration": 466,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n\n    const currentUrl = await driver.getCurrentUrl();\n    \n    // Assert exact match of current URL with the expected URL\n    assert.strictEqual(currentUrl, DASHBOARD_URL, `User ${index + 1} user can not log in, user does not exist`);\n    \n    // Navigate to profile page\n    await navigateToProfilePage();\n\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n    // Wait for the alert pop-up to appear\n    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    const alert = await driver.switchTo().alert();\n    \n    // Press the OK button on the alert\n    await alert.accept();\n    //get current url after deleetion\n    const currentUrl2 = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl, currentUrl2, \"After Successful deletion of user the page should be directed to homepage\");",
              "err": {
                "message": "AssertionError: User 2 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: User 2 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^\n    at Context.<anonymous> (test\\delete_user_profile_test.js:176:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/login\n+ http://localhost:3000/hire-wire-front-end/jobapplication\n"
              },
              "uuid": "ecdf5d46-68e3-41a4-bc45-461e64f0d97b",
              "parentUUID": "88a28f2c-6652-45b3-bffa-965f738f39a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 3",
              "fullTitle": "User Profile Deletion Functionality Test User Profile Test 3",
              "timedOut": false,
              "duration": 456,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n\n    const currentUrl = await driver.getCurrentUrl();\n    \n    // Assert exact match of current URL with the expected URL\n    assert.strictEqual(currentUrl, DASHBOARD_URL, `User ${index + 1} user can not log in, user does not exist`);\n    \n    // Navigate to profile page\n    await navigateToProfilePage();\n\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n    // Wait for the alert pop-up to appear\n    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    const alert = await driver.switchTo().alert();\n    \n    // Press the OK button on the alert\n    await alert.accept();\n    //get current url after deleetion\n    const currentUrl2 = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl, currentUrl2, \"After Successful deletion of user the page should be directed to homepage\");",
              "err": {
                "message": "AssertionError: User 3 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: User 3 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^\n    at Context.<anonymous> (test\\delete_user_profile_test.js:176:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/login\n+ http://localhost:3000/hire-wire-front-end/jobapplication\n"
              },
              "uuid": "5b2a31ab-2ffe-48b3-ac66-2c9f6234bcb5",
              "parentUUID": "88a28f2c-6652-45b3-bffa-965f738f39a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 4",
              "fullTitle": "User Profile Deletion Functionality Test User Profile Test 4",
              "timedOut": false,
              "duration": 439,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n\n    const currentUrl = await driver.getCurrentUrl();\n    \n    // Assert exact match of current URL with the expected URL\n    assert.strictEqual(currentUrl, DASHBOARD_URL, `User ${index + 1} user can not log in, user does not exist`);\n    \n    // Navigate to profile page\n    await navigateToProfilePage();\n\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n    // Wait for the alert pop-up to appear\n    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    const alert = await driver.switchTo().alert();\n    \n    // Press the OK button on the alert\n    await alert.accept();\n    //get current url after deleetion\n    const currentUrl2 = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl, currentUrl2, \"After Successful deletion of user the page should be directed to homepage\");",
              "err": {
                "message": "AssertionError: User 4 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: User 4 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^\n    at Context.<anonymous> (test\\delete_user_profile_test.js:176:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/login\n+ http://localhost:3000/hire-wire-front-end/jobapplication\n"
              },
              "uuid": "a1dfd4dc-4834-4ef5-9ee8-e1658524580a",
              "parentUUID": "88a28f2c-6652-45b3-bffa-965f738f39a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 5",
              "fullTitle": "User Profile Deletion Functionality Test User Profile Test 5",
              "timedOut": false,
              "duration": 419,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n\n    const currentUrl = await driver.getCurrentUrl();\n    \n    // Assert exact match of current URL with the expected URL\n    assert.strictEqual(currentUrl, DASHBOARD_URL, `User ${index + 1} user can not log in, user does not exist`);\n    \n    // Navigate to profile page\n    await navigateToProfilePage();\n\n    // Click delete Button\n    const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n    await deleteButton.click();\n    // Wait for the alert pop-up to appear\n    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    const alert = await driver.switchTo().alert();\n    \n    // Press the OK button on the alert\n    await alert.accept();\n    //get current url after deleetion\n    const currentUrl2 = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl, currentUrl2, \"After Successful deletion of user the page should be directed to homepage\");",
              "err": {
                "message": "AssertionError: User 5 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: User 5 user can not log in, user does not exist\n+ actual - expected\n\n+ 'http://localhost:3000/hire-wire-front-end/login'\n- 'http://localhost:3000/hire-wire-front-end/jobapplication'\n                                             ^\n    at Context.<anonymous> (test\\delete_user_profile_test.js:176:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- http://localhost:3000/hire-wire-front-end/login\n+ http://localhost:3000/hire-wire-front-end/jobapplication\n"
              },
              "uuid": "c137b08b-92d3-4e77-bfdc-2f8506812d3e",
              "parentUUID": "88a28f2c-6652-45b3-bffa-965f738f39a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8ccdf1fb-9b83-4f79-90ff-44596b77bbf3",
            "ecdf5d46-68e3-41a4-bc45-461e64f0d97b",
            "5b2a31ab-2ffe-48b3-ac66-2c9f6234bcb5",
            "a1dfd4dc-4834-4ef5-9ee8-e1658524580a",
            "c137b08b-92d3-4e77-bfdc-2f8506812d3e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2783,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}