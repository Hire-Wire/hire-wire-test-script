{
  "stats": {
    "suites": 8,
    "tests": 40,
    "passes": 35,
    "pending": 0,
    "failures": 5,
    "start": "2024-11-17T18:43:01.705Z",
    "end": "2024-11-17T18:45:02.108Z",
    "duration": 120403,
    "testsRegistered": 40,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1dfae3af-2900-42b0-b0d0-0d013ef9e666",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
          "title": "Adding Education Experience to profile Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\test\\addEducationExperience.js",
          "file": "\\test\\addEducationExperience.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Adding Education Experience to profile Test\"",
              "fullTitle": "Adding Education Experience to profile Test \"before all\" hook in \"Adding Education Experience to profile Test\"",
              "timedOut": false,
              "duration": 952,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "61eca1ad-2e30-4bdc-9d4f-548c40aea3bd",
              "parentUUID": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Adding Education Experience to profile Test\"",
              "fullTitle": "Adding Education Experience to profile Test \"after all\" hook in \"Adding Education Experience to profile Test\"",
              "timedOut": false,
              "duration": 83,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "bbbcec63-fa05-4662-8047-1b1ab8701a0f",
              "parentUUID": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Adding Education Experience to profile Test\"",
              "fullTitle": "Adding Education Experience to profile Test \"after each\" hook in \"Adding Education Experience to profile Test\"",
              "timedOut": false,
              "duration": 70,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "268f3623-1521-4353-ac3b-0935dfe19b30",
              "parentUUID": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User 1",
              "fullTitle": "Adding Education Experience to profile Test User 1",
              "timedOut": false,
              "duration": 1920,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n// Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\n// for (const experience of user.workExperience) {\n//     await fillExperienceForm(experience);\n// }\n// Go to the Education section and fill it in\nfor (const education of user.Education) {\n    await fillEducationForm(education);\n}",
              "err": {},
              "uuid": "de1b6acb-23d7-4b70-bca7-b9d035a84eab",
              "parentUUID": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 2",
              "fullTitle": "Adding Education Experience to profile Test User 2",
              "timedOut": false,
              "duration": 1292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n// Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\n// for (const experience of user.workExperience) {\n//     await fillExperienceForm(experience);\n// }\n// Go to the Education section and fill it in\nfor (const education of user.Education) {\n    await fillEducationForm(education);\n}",
              "err": {},
              "uuid": "00f353ce-465b-40af-9ac2-73718f717fa3",
              "parentUUID": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 3",
              "fullTitle": "Adding Education Experience to profile Test User 3",
              "timedOut": false,
              "duration": 1229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n// Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\n// for (const experience of user.workExperience) {\n//     await fillExperienceForm(experience);\n// }\n// Go to the Education section and fill it in\nfor (const education of user.Education) {\n    await fillEducationForm(education);\n}",
              "err": {},
              "uuid": "60ade952-f77e-4ddc-ad74-5d56c54a4f60",
              "parentUUID": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 4",
              "fullTitle": "Adding Education Experience to profile Test User 4",
              "timedOut": false,
              "duration": 1242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n// Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\n// for (const experience of user.workExperience) {\n//     await fillExperienceForm(experience);\n// }\n// Go to the Education section and fill it in\nfor (const education of user.Education) {\n    await fillEducationForm(education);\n}",
              "err": {},
              "uuid": "e6664ebf-7b6d-443c-a2a9-d64311790dda",
              "parentUUID": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 5",
              "fullTitle": "Adding Education Experience to profile Test User 5",
              "timedOut": false,
              "duration": 1200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n// Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\n// for (const experience of user.workExperience) {\n//     await fillExperienceForm(experience);\n// }\n// Go to the Education section and fill it in\nfor (const education of user.Education) {\n    await fillEducationForm(education);\n}",
              "err": {},
              "uuid": "412b2acc-1eb1-40c4-be36-5f6ffd040bf2",
              "parentUUID": "1226c5b4-eeb7-40f4-a43f-8e4d2fdcd675",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de1b6acb-23d7-4b70-bca7-b9d035a84eab",
            "00f353ce-465b-40af-9ac2-73718f717fa3",
            "60ade952-f77e-4ddc-ad74-5d56c54a4f60",
            "e6664ebf-7b6d-443c-a2a9-d64311790dda",
            "412b2acc-1eb1-40c4-be36-5f6ffd040bf2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6883,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
          "title": "User Experience Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\test\\addJobExperience_test.js",
          "file": "\\test\\addJobExperience_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Experience Test\"",
              "fullTitle": "User Experience Test \"before all\" hook in \"User Experience Test\"",
              "timedOut": false,
              "duration": 941,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "e3f80605-2a18-48b7-a3f8-bc5c3cb5da45",
              "parentUUID": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Experience Test\"",
              "fullTitle": "User Experience Test \"after all\" hook in \"User Experience Test\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "f3baa1b7-e005-4f5e-82c0-a6a2db7633c1",
              "parentUUID": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Experience Test\"",
              "fullTitle": "User Experience Test \"after each\" hook in \"User Experience Test\"",
              "timedOut": false,
              "duration": 74,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "e043db89-39d0-4535-b66b-52e293b50fd1",
              "parentUUID": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User 1",
              "fullTitle": "User Experience Test User 1",
              "timedOut": false,
              "duration": 2014,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}\n// Go to the Education section and fill it in\n// await navigateToPage(EXPERIENCE_URL);\n// for (const education of user.Education) {\n//     await fillEducationForm(education);\n// }",
              "err": {},
              "uuid": "f1da04c1-6639-4c58-92eb-264101483186",
              "parentUUID": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 2",
              "fullTitle": "User Experience Test User 2",
              "timedOut": false,
              "duration": 1376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}\n// Go to the Education section and fill it in\n// await navigateToPage(EXPERIENCE_URL);\n// for (const education of user.Education) {\n//     await fillEducationForm(education);\n// }",
              "err": {},
              "uuid": "fc0f7542-c749-482f-a83f-5fd53f1c4a64",
              "parentUUID": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 3",
              "fullTitle": "User Experience Test User 3",
              "timedOut": false,
              "duration": 1342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}\n// Go to the Education section and fill it in\n// await navigateToPage(EXPERIENCE_URL);\n// for (const education of user.Education) {\n//     await fillEducationForm(education);\n// }",
              "err": {},
              "uuid": "3b79c40f-25e0-430c-8e32-804b70c1d1e2",
              "parentUUID": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 4",
              "fullTitle": "User Experience Test User 4",
              "timedOut": false,
              "duration": 1371,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}\n// Go to the Education section and fill it in\n// await navigateToPage(EXPERIENCE_URL);\n// for (const education of user.Education) {\n//     await fillEducationForm(education);\n// }",
              "err": {},
              "uuid": "5dd2d9ba-53d5-4127-a34c-4169ed0f1b55",
              "parentUUID": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 5",
              "fullTitle": "User Experience Test User 5",
              "timedOut": false,
              "duration": 1403,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();\nawait login(user);\n// Verify user is on the dashboard\nconst currentUrl = await driver.getCurrentUrl();\nassert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n//Go to the Experience Page and fill the form\nawait navigateToPage(EXPERIENCE_URL);\nfor (const experience of user.workExperience) {\n    await fillExperienceForm(experience);\n}\n// Go to the Education section and fill it in\n// await navigateToPage(EXPERIENCE_URL);\n// for (const education of user.Education) {\n//     await fillEducationForm(education);\n// }",
              "err": {},
              "uuid": "7e5523c1-ea8c-43f1-b034-6dcddc25db6b",
              "parentUUID": "b6f49259-5e93-452a-9c7e-37b7be87f0d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1da04c1-6639-4c58-92eb-264101483186",
            "fc0f7542-c749-482f-a83f-5fd53f1c4a64",
            "3b79c40f-25e0-430c-8e32-804b70c1d1e2",
            "5dd2d9ba-53d5-4127-a34c-4169ed0f1b55",
            "7e5523c1-ea8c-43f1-b034-6dcddc25db6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
          "title": "User Profile Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\test\\deleteExperience.js",
          "file": "\\test\\deleteExperience.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"before all\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 932,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "44dfc868-87f4-4d9f-ac84-0182c9f607d9",
              "parentUUID": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"after all\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 130,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "bb3ab8ec-4a3b-4bdf-9d30-45ad4c6021ce",
              "parentUUID": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"after each\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 73,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "a64ff2e3-2702-4d74-94f6-27efb3166b47",
              "parentUUID": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User Profile Test 1",
              "fullTitle": "User Profile Functionality Test User Profile Test 1",
              "timedOut": false,
              "duration": 1595,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToExperiencePage();\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       await driver.sleep(100);\n       // Wait for the alert pop-up to appear\n    //    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    //    const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n    //    await alert.accept();\n\n    //             // Optional: Wait and validate save action\n    //             await driver.sleep(2000);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "ac06aca2-b3e6-47fe-bf84-25b5375f8b44",
              "parentUUID": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 2",
              "fullTitle": "User Profile Functionality Test User Profile Test 2",
              "timedOut": false,
              "duration": 872,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToExperiencePage();\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       await driver.sleep(100);\n       // Wait for the alert pop-up to appear\n    //    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    //    const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n    //    await alert.accept();\n\n    //             // Optional: Wait and validate save action\n    //             await driver.sleep(2000);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "4ed66bc7-f43c-49d0-a7fd-7ec1869a0475",
              "parentUUID": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 3",
              "fullTitle": "User Profile Functionality Test User Profile Test 3",
              "timedOut": false,
              "duration": 868,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToExperiencePage();\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       await driver.sleep(100);\n       // Wait for the alert pop-up to appear\n    //    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    //    const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n    //    await alert.accept();\n\n    //             // Optional: Wait and validate save action\n    //             await driver.sleep(2000);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "207c3e1b-6614-4998-af30-993ceff2b8e2",
              "parentUUID": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 4",
              "fullTitle": "User Profile Functionality Test User Profile Test 4",
              "timedOut": false,
              "duration": 234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToExperiencePage();\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       await driver.sleep(100);\n       // Wait for the alert pop-up to appear\n    //    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    //    const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n    //    await alert.accept();\n\n    //             // Optional: Wait and validate save action\n    //             await driver.sleep(2000);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "d73105d9-3fdc-4892-8680-94ac6af38488",
              "parentUUID": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 5",
              "fullTitle": "User Profile Functionality Test User Profile Test 5",
              "timedOut": false,
              "duration": 788,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToExperiencePage();\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"remove-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       await driver.sleep(100);\n       // Wait for the alert pop-up to appear\n    //    await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n    //    const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n    //    await alert.accept();\n\n    //             // Optional: Wait and validate save action\n    //             await driver.sleep(2000);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "f8eca72d-fff1-452a-9245-e40120478fe2",
              "parentUUID": "46834b49-402c-4e81-ae1a-16f8713c4bb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac06aca2-b3e6-47fe-bf84-25b5375f8b44",
            "4ed66bc7-f43c-49d0-a7fd-7ec1869a0475",
            "207c3e1b-6614-4998-af30-993ceff2b8e2",
            "d73105d9-3fdc-4892-8680-94ac6af38488",
            "f8eca72d-fff1-452a-9245-e40120478fe2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4357,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a7f600f9-10e6-47f0-adea-007813b01d27",
          "title": "User Profile Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\test\\DeleteUserProfile.js",
          "file": "\\test\\DeleteUserProfile.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"before all\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 942,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "dbef48e7-a575-46c8-8d1f-30d13f82e3d2",
              "parentUUID": "a7f600f9-10e6-47f0-adea-007813b01d27",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"after all\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "e95f4eda-8a45-4b3f-841a-c026ba765b54",
              "parentUUID": "a7f600f9-10e6-47f0-adea-007813b01d27",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"after each\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "6cbde734-5164-4b36-9b7f-c8917030a7f0",
              "parentUUID": "a7f600f9-10e6-47f0-adea-007813b01d27",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User Profile Test 1",
              "fullTitle": "User Profile Functionality Test User Profile Test 1",
              "timedOut": false,
              "duration": 1638,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    // const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    // await firstName.clear();\n    // await firstName.sendKeys(user.firstName);\n    // const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    // await lastName.clear();\n    // await lastName.sendKeys(user.lastName);\n    // const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    // await phoneNumber.clear();\n    // await phoneNumber.sendKeys(user.phoneNumber);\n    // const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    // await emailAddress.clear();\n    // await emailAddress.sendKeys(user.emailAddress);\n    // const statusDropdown = await driver.findElement(By.xpath('//select'));\n    // await statusDropdown.sendKeys(user.status);\n\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       // Wait for the alert pop-up to appear\n       await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n       const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n       await alert.accept();\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "dd4c6df2-68d6-48fd-a7a1-8f95ac8d42ea",
              "parentUUID": "a7f600f9-10e6-47f0-adea-007813b01d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 2",
              "fullTitle": "User Profile Functionality Test User Profile Test 2",
              "timedOut": false,
              "duration": 853,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    // const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    // await firstName.clear();\n    // await firstName.sendKeys(user.firstName);\n    // const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    // await lastName.clear();\n    // await lastName.sendKeys(user.lastName);\n    // const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    // await phoneNumber.clear();\n    // await phoneNumber.sendKeys(user.phoneNumber);\n    // const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    // await emailAddress.clear();\n    // await emailAddress.sendKeys(user.emailAddress);\n    // const statusDropdown = await driver.findElement(By.xpath('//select'));\n    // await statusDropdown.sendKeys(user.status);\n\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       // Wait for the alert pop-up to appear\n       await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n       const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n       await alert.accept();\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "9891f0d3-fc60-4a1a-bba7-7099bd7fd610",
              "parentUUID": "a7f600f9-10e6-47f0-adea-007813b01d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 3",
              "fullTitle": "User Profile Functionality Test User Profile Test 3",
              "timedOut": false,
              "duration": 873,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    // const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    // await firstName.clear();\n    // await firstName.sendKeys(user.firstName);\n    // const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    // await lastName.clear();\n    // await lastName.sendKeys(user.lastName);\n    // const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    // await phoneNumber.clear();\n    // await phoneNumber.sendKeys(user.phoneNumber);\n    // const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    // await emailAddress.clear();\n    // await emailAddress.sendKeys(user.emailAddress);\n    // const statusDropdown = await driver.findElement(By.xpath('//select'));\n    // await statusDropdown.sendKeys(user.status);\n\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       // Wait for the alert pop-up to appear\n       await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n       const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n       await alert.accept();\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "eee22196-7d20-4e35-8dca-cf5fcef3af92",
              "parentUUID": "a7f600f9-10e6-47f0-adea-007813b01d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 4",
              "fullTitle": "User Profile Functionality Test User Profile Test 4",
              "timedOut": false,
              "duration": 861,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    // const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    // await firstName.clear();\n    // await firstName.sendKeys(user.firstName);\n    // const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    // await lastName.clear();\n    // await lastName.sendKeys(user.lastName);\n    // const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    // await phoneNumber.clear();\n    // await phoneNumber.sendKeys(user.phoneNumber);\n    // const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    // await emailAddress.clear();\n    // await emailAddress.sendKeys(user.emailAddress);\n    // const statusDropdown = await driver.findElement(By.xpath('//select'));\n    // await statusDropdown.sendKeys(user.status);\n\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       // Wait for the alert pop-up to appear\n       await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n       const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n       await alert.accept();\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "8c2c4678-10bf-4f4a-b866-9d813726c7ae",
              "parentUUID": "a7f600f9-10e6-47f0-adea-007813b01d27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 5",
              "fullTitle": "User Profile Functionality Test User Profile Test 5",
              "timedOut": false,
              "duration": 933,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    // const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    // await firstName.clear();\n    // await firstName.sendKeys(user.firstName);\n    // const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    // await lastName.clear();\n    // await lastName.sendKeys(user.lastName);\n    // const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    // await phoneNumber.clear();\n    // await phoneNumber.sendKeys(user.phoneNumber);\n    // const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    // await emailAddress.clear();\n    // await emailAddress.sendKeys(user.emailAddress);\n    // const statusDropdown = await driver.findElement(By.xpath('//select'));\n    // await statusDropdown.sendKeys(user.status);\n\n\n       // Click delete Button\n       const deleteButton = await driver.findElement(By.xpath('//button[contains(@class, \"delete-user-profile-button\") and @type=\"button\"]'));\n       await deleteButton.click();\n\n       // Wait for the alert pop-up to appear\n       await driver.wait(until.alertIsPresent(), 5000); // Adjust timeout if needed\n       const alert = await driver.switchTo().alert();\n       \n       // Press the OK button on the alert\n       await alert.accept();\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "73416a5a-8b69-41ae-a783-2e6e9cfb90e3",
              "parentUUID": "a7f600f9-10e6-47f0-adea-007813b01d27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd4c6df2-68d6-48fd-a7a1-8f95ac8d42ea",
            "9891f0d3-fc60-4a1a-bba7-7099bd7fd610",
            "eee22196-7d20-4e35-8dca-cf5fcef3af92",
            "8c2c4678-10bf-4f4a-b866-9d813726c7ae",
            "73416a5a-8b69-41ae-a783-2e6e9cfb90e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5158,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
          "title": "User Profile Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\test\\EditUserProfile_test.js",
          "file": "\\test\\EditUserProfile_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"before all\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 935,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "722be664-450f-4192-aa40-f36fad00c4d9",
              "parentUUID": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"after all\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 55,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting the WebDriver:', error);\n}",
              "err": {},
              "uuid": "e695a4f4-2c82-4107-ba53-43f56e32f70d",
              "parentUUID": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Profile Functionality Test\"",
              "fullTitle": "User Profile Functionality Test \"after each\" hook in \"User Profile Functionality Test\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "191eb5e2-dfbe-4440-b210-15a25222e1f1",
              "parentUUID": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User Profile Test 1",
              "fullTitle": "User Profile Functionality Test User Profile Test 1",
              "timedOut": false,
              "duration": 6217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "deb0ecf5-0714-4b64-bf6f-507f551b8100",
              "parentUUID": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 2",
              "fullTitle": "User Profile Functionality Test User Profile Test 2",
              "timedOut": false,
              "duration": 5607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "cc02c9c8-3ad6-482d-9194-e7da0cabde9a",
              "parentUUID": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 3",
              "fullTitle": "User Profile Functionality Test User Profile Test 3",
              "timedOut": false,
              "duration": 5622,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "89836312-2a3e-44a3-acc9-f0a69d50c5ef",
              "parentUUID": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 4",
              "fullTitle": "User Profile Functionality Test User Profile Test 4",
              "timedOut": false,
              "duration": 5532,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "e7d04cfe-094b-426b-9a90-f9f8643a47bd",
              "parentUUID": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Profile Test 5",
              "fullTitle": "User Profile Functionality Test User Profile Test 5",
              "timedOut": false,
              "duration": 5565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    const loginButton = await driver.findElement(By.xpath('//button[contains(@class, \"login-button\")]'));\n    await loginButton.click();\n    // Login\n    await driver.findElement(By.xpath('//input[@placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Password\"]')).sendKeys(user.password);\n    const submitButton = await driver.findElement(By.xpath('//button[@type=\"submit\"]'));\n    await submitButton.click();\n    // Wait for dashboard\n    await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n    const currentUrl = await driver.getCurrentUrl();\n    assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n\n    console.log(user.firstName);\n    console.log(user.phoneNumber);\n    // Navigate to profile page\n    await navigateToProfilePage();\n    // Fill out profile fields\n    const firstName = await driver.findElement(By.xpath('//input[@placeholder=\"First Name (required)\"]'));\n    await firstName.clear();\n    await firstName.sendKeys(user.firstName);\n    const lastName = await driver.findElement(By.xpath('//input[@placeholder=\"Last Name (required)\"]'));\n    await lastName.clear();\n    await lastName.sendKeys(user.lastName);\n    const phoneNumber = await driver.findElement(By.xpath('//input[@placeholder=\"Phone Number (optional)\"]'));\n    await phoneNumber.clear();\n    await phoneNumber.sendKeys(user.phoneNumber);\n    const emailAddress = await driver.findElement(By.xpath('//input[@type=\"email\"]'));\n    await emailAddress.clear();\n    await emailAddress.sendKeys(user.emailAddress);\n    const statusDropdown = await driver.findElement(By.xpath('//select'));\n    await statusDropdown.sendKeys(user.status);\n    // Click Save Button\n    const saveButton = await driver.findElement(By.xpath('//button[contains(@class, \"save-button\") and @type=\"button\"]'));\n    const isDisabled = await saveButton.getAttribute('disabled');\n    if (!isDisabled) {\n        await saveButton.click();\n    } else {\n        console.log('Save button is disabled.');\n    }\n    // Optional: Wait and validate save action\n    await driver.sleep(100);\n} catch (error) {\n    console.error(`Error in User Profile Test ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "76bc4ea6-2132-40ae-a4bf-a531dfbca551",
              "parentUUID": "a35f3e87-ab9b-448e-a7ea-7bd033044db5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "deb0ecf5-0714-4b64-bf6f-507f551b8100",
            "cc02c9c8-3ad6-482d-9194-e7da0cabde9a",
            "89836312-2a3e-44a3-acc9-f0a69d50c5ef",
            "e7d04cfe-094b-426b-9a90-f9f8643a47bd",
            "76bc4ea6-2132-40ae-a4bf-a531dfbca551"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28543,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "69f04d48-4ffe-41af-9a86-05ef7a08f4c8",
          "title": "Job Application Form Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\test\\Generate_Resume_test.js",
          "file": "\\test\\Generate_Resume_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Job Application Form Test\"",
              "fullTitle": "Job Application Form Test \"before all\" hook in \"Job Application Form Test\"",
              "timedOut": false,
              "duration": 975,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    driver = await new Builder().forBrowser('chrome').build();\n} catch (error) {\n    console.error('Error initializing WebDriver:', error);\n}",
              "err": {},
              "uuid": "ae33afde-98fc-42b1-a5e3-580350528910",
              "parentUUID": "69f04d48-4ffe-41af-9a86-05ef7a08f4c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Job Application Form Test\"",
              "fullTitle": "Job Application Form Test \"after all\" hook in \"Job Application Form Test\"",
              "timedOut": false,
              "duration": 90,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.quit();\n} catch (error) {\n    console.error('Error quitting WebDriver:', error);\n}",
              "err": {},
              "uuid": "af468df4-6584-4f00-9338-6115af799321",
              "parentUUID": "69f04d48-4ffe-41af-9a86-05ef7a08f4c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User 1: Job Application Form Test",
              "fullTitle": "Job Application Form Test User 1: Job Application Form Test",
              "timedOut": false,
              "duration": 6233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    // Log in with the current user's credentials\n    const loginbtn = await driver.findElement(By.className('login-button'));\n    await loginbtn.click();\n    await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n    const logbtn = await driver.findElement(By.css('button[type=\"submit\"]'));\n    await logbtn.click();\n    // Wait for the dashboard or confirmation that the login was successful\n    await driver.wait(until.urlContains(APPLICATION_URL), 5000);\n    // Navigate to the application page\n    await navigateToApplicationPage();\n    // Fill out the job application form\n    await driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\n    await driver.findElement(By.css('textarea[placeholder=\"Job description / information... (required)\"]')).sendKeys(\n        'Developing and maintaining web applications using modern frameworks.'\n    );\n    // Uncomment and adjust as needed for the optional description field\n    // await driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional)\"]')).sendKeys(\n    //     user.description\n    // );\n    // Click the \"Generate\" button to create the resume\n    const generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\n    await generateButton.click();\n    // Verify if the generated content appears (assuming there is an element with generated content)\n    const generatedContent = await driver.wait(\n        until.elementLocated(By.css('.generated-content')),\n        5000\n    );\n    await driver.sleep(1000);\n    const generatedText = await generatedContent.getText();\n    assert.ok(\n        generatedText.includes('Generated Resume'),\n        'The generated resume should appear on the page'\n    );\n} catch (error) {\n    console.error(`Error in Job Application Form Test for User ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "048e043f-08e9-4ecf-93f6-1df7eb76b78f",
              "parentUUID": "69f04d48-4ffe-41af-9a86-05ef7a08f4c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 2: Job Application Form Test",
              "fullTitle": "Job Application Form Test User 2: Job Application Form Test",
              "timedOut": false,
              "duration": 5396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    // Log in with the current user's credentials\n    const loginbtn = await driver.findElement(By.className('login-button'));\n    await loginbtn.click();\n    await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n    const logbtn = await driver.findElement(By.css('button[type=\"submit\"]'));\n    await logbtn.click();\n    // Wait for the dashboard or confirmation that the login was successful\n    await driver.wait(until.urlContains(APPLICATION_URL), 5000);\n    // Navigate to the application page\n    await navigateToApplicationPage();\n    // Fill out the job application form\n    await driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\n    await driver.findElement(By.css('textarea[placeholder=\"Job description / information... (required)\"]')).sendKeys(\n        'Developing and maintaining web applications using modern frameworks.'\n    );\n    // Uncomment and adjust as needed for the optional description field\n    // await driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional)\"]')).sendKeys(\n    //     user.description\n    // );\n    // Click the \"Generate\" button to create the resume\n    const generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\n    await generateButton.click();\n    // Verify if the generated content appears (assuming there is an element with generated content)\n    const generatedContent = await driver.wait(\n        until.elementLocated(By.css('.generated-content')),\n        5000\n    );\n    await driver.sleep(1000);\n    const generatedText = await generatedContent.getText();\n    assert.ok(\n        generatedText.includes('Generated Resume'),\n        'The generated resume should appear on the page'\n    );\n} catch (error) {\n    console.error(`Error in Job Application Form Test for User ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "5142c132-e57e-4890-861f-abe91f233428",
              "parentUUID": "69f04d48-4ffe-41af-9a86-05ef7a08f4c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 3: Job Application Form Test",
              "fullTitle": "Job Application Form Test User 3: Job Application Form Test",
              "timedOut": false,
              "duration": 5483,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    // Log in with the current user's credentials\n    const loginbtn = await driver.findElement(By.className('login-button'));\n    await loginbtn.click();\n    await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n    const logbtn = await driver.findElement(By.css('button[type=\"submit\"]'));\n    await logbtn.click();\n    // Wait for the dashboard or confirmation that the login was successful\n    await driver.wait(until.urlContains(APPLICATION_URL), 5000);\n    // Navigate to the application page\n    await navigateToApplicationPage();\n    // Fill out the job application form\n    await driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\n    await driver.findElement(By.css('textarea[placeholder=\"Job description / information... (required)\"]')).sendKeys(\n        'Developing and maintaining web applications using modern frameworks.'\n    );\n    // Uncomment and adjust as needed for the optional description field\n    // await driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional)\"]')).sendKeys(\n    //     user.description\n    // );\n    // Click the \"Generate\" button to create the resume\n    const generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\n    await generateButton.click();\n    // Verify if the generated content appears (assuming there is an element with generated content)\n    const generatedContent = await driver.wait(\n        until.elementLocated(By.css('.generated-content')),\n        5000\n    );\n    await driver.sleep(1000);\n    const generatedText = await generatedContent.getText();\n    assert.ok(\n        generatedText.includes('Generated Resume'),\n        'The generated resume should appear on the page'\n    );\n} catch (error) {\n    console.error(`Error in Job Application Form Test for User ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "b2741e67-0b4b-40c6-ba7d-1e6cce637737",
              "parentUUID": "69f04d48-4ffe-41af-9a86-05ef7a08f4c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 4: Job Application Form Test",
              "fullTitle": "Job Application Form Test User 4: Job Application Form Test",
              "timedOut": false,
              "duration": 5413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    // Log in with the current user's credentials\n    const loginbtn = await driver.findElement(By.className('login-button'));\n    await loginbtn.click();\n    await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n    const logbtn = await driver.findElement(By.css('button[type=\"submit\"]'));\n    await logbtn.click();\n    // Wait for the dashboard or confirmation that the login was successful\n    await driver.wait(until.urlContains(APPLICATION_URL), 5000);\n    // Navigate to the application page\n    await navigateToApplicationPage();\n    // Fill out the job application form\n    await driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\n    await driver.findElement(By.css('textarea[placeholder=\"Job description / information... (required)\"]')).sendKeys(\n        'Developing and maintaining web applications using modern frameworks.'\n    );\n    // Uncomment and adjust as needed for the optional description field\n    // await driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional)\"]')).sendKeys(\n    //     user.description\n    // );\n    // Click the \"Generate\" button to create the resume\n    const generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\n    await generateButton.click();\n    // Verify if the generated content appears (assuming there is an element with generated content)\n    const generatedContent = await driver.wait(\n        until.elementLocated(By.css('.generated-content')),\n        5000\n    );\n    await driver.sleep(1000);\n    const generatedText = await generatedContent.getText();\n    assert.ok(\n        generatedText.includes('Generated Resume'),\n        'The generated resume should appear on the page'\n    );\n} catch (error) {\n    console.error(`Error in Job Application Form Test for User ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "4a44bd87-e0bf-43a8-a52e-512efb5fd62f",
              "parentUUID": "69f04d48-4ffe-41af-9a86-05ef7a08f4c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User 5: Job Application Form Test",
              "fullTitle": "Job Application Form Test User 5: Job Application Form Test",
              "timedOut": false,
              "duration": 5410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await logoutIfLoggedIn();\n    await navigateToLoginPage();\n    // Log in with the current user's credentials\n    const loginbtn = await driver.findElement(By.className('login-button'));\n    await loginbtn.click();\n    await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n    await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n    const logbtn = await driver.findElement(By.css('button[type=\"submit\"]'));\n    await logbtn.click();\n    // Wait for the dashboard or confirmation that the login was successful\n    await driver.wait(until.urlContains(APPLICATION_URL), 5000);\n    // Navigate to the application page\n    await navigateToApplicationPage();\n    // Fill out the job application form\n    await driver.findElement(By.xpath('//input[@placeholder=\"Job title (required)\"]')).sendKeys(user.jobTitle);\n    await driver.findElement(By.xpath('//input[@placeholder=\"Company (required)\"]')).sendKeys(user.company);\n    await driver.findElement(By.css('textarea[placeholder=\"Job description / information... (required)\"]')).sendKeys(\n        'Developing and maintaining web applications using modern frameworks.'\n    );\n    // Uncomment and adjust as needed for the optional description field\n    // await driver.findElement(By.xpath('//textarea[@placeholder=\"Write additional information about yourself (Optional)\"]')).sendKeys(\n    //     user.description\n    // );\n    // Click the \"Generate\" button to create the resume\n    const generateButton = await driver.findElement(By.xpath('//button[contains(@class, \"generate-button\")]'));\n    await generateButton.click();\n    // Verify if the generated content appears (assuming there is an element with generated content)\n    const generatedContent = await driver.wait(\n        until.elementLocated(By.css('.generated-content')),\n        5000\n    );\n    await driver.sleep(1000);\n    const generatedText = await generatedContent.getText();\n    assert.ok(\n        generatedText.includes('Generated Resume'),\n        'The generated resume should appear on the page'\n    );\n} catch (error) {\n    console.error(`Error in Job Application Form Test for User ${index + 1}:`, error);\n}",
              "err": {},
              "uuid": "5d4d6200-4365-4877-a6db-7e5072a6ea94",
              "parentUUID": "69f04d48-4ffe-41af-9a86-05ef7a08f4c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "048e043f-08e9-4ecf-93f6-1df7eb76b78f",
            "5142c132-e57e-4890-861f-abe91f233428",
            "b2741e67-0b4b-40c6-ba7d-1e6cce637737",
            "4a44bd87-e0bf-43a8-a52e-512efb5fd62f",
            "5d4d6200-4365-4877-a6db-7e5072a6ea94"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27935,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1222252a-8150-4fe7-ad6d-414a205be57c",
          "title": "Login Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\test\\user_login_test.js",
          "file": "\\test\\user_login_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Login Functionality Test\"",
              "fullTitle": "Login Functionality Test \"before all\" hook in \"Login Functionality Test\"",
              "timedOut": false,
              "duration": 893,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "ce4d6e71-3c35-4341-9c57-40ed86f075ff",
              "parentUUID": "1222252a-8150-4fe7-ad6d-414a205be57c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Login Functionality Test\"",
              "fullTitle": "Login Functionality Test \"after all\" hook in \"Login Functionality Test\"",
              "timedOut": false,
              "duration": 46,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "33ace633-a5df-4acb-be1e-ea7630e4c2ec",
              "parentUUID": "1222252a-8150-4fe7-ad6d-414a205be57c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Login Functionality Test\"",
              "fullTitle": "Login Functionality Test \"after each\" hook in \"Login Functionality Test\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "9b20db9e-9648-42ca-b313-228ff97d183e",
              "parentUUID": "1222252a-8150-4fe7-ad6d-414a205be57c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "1",
              "fullTitle": "Login Functionality Test 1",
              "timedOut": false,
              "duration": 6205,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "console.log(\"Username:\", user.emailAddress);\n            console.log(\"Password:\", user.password);\n            \n            await navigateToLoginPage();\n            const loginbtn = await driver.findElement(By.className('login-button'));\n            await loginbtn.click();\n            // Use the username and password for the current user\n            await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n            await driver.findElement(By.css(\"input[placeholder='Password']\")).sendKeys(user.password);\n            // await driver.findElement(By.css('button[type = \"submit\")]')).click();\n            const loginButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n            await loginButton.click();\n            \n            await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n            const currentUrl = await driver.getCurrentUrl();\n            assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n            await logoutIfLoggedIn(); \n            // Add any additional steps to log out if necessary, before testing the next user",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5187ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5187ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "30a91404-22f9-4be0-8a7c-cc16dc77de39",
              "parentUUID": "1222252a-8150-4fe7-ad6d-414a205be57c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2",
              "fullTitle": "Login Functionality Test 2",
              "timedOut": false,
              "duration": 5558,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "console.log(\"Username:\", user.emailAddress);\n            console.log(\"Password:\", user.password);\n            \n            await navigateToLoginPage();\n            const loginbtn = await driver.findElement(By.className('login-button'));\n            await loginbtn.click();\n            // Use the username and password for the current user\n            await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n            await driver.findElement(By.css(\"input[placeholder='Password']\")).sendKeys(user.password);\n            // await driver.findElement(By.css('button[type = \"submit\")]')).click();\n            const loginButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n            await loginButton.click();\n            \n            await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n            const currentUrl = await driver.getCurrentUrl();\n            assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n            await logoutIfLoggedIn(); \n            // Add any additional steps to log out if necessary, before testing the next user",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5165ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5165ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "9322f013-c47f-4b37-a09e-5f56466b712b",
              "parentUUID": "1222252a-8150-4fe7-ad6d-414a205be57c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3",
              "fullTitle": "Login Functionality Test 3",
              "timedOut": false,
              "duration": 5472,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "console.log(\"Username:\", user.emailAddress);\n            console.log(\"Password:\", user.password);\n            \n            await navigateToLoginPage();\n            const loginbtn = await driver.findElement(By.className('login-button'));\n            await loginbtn.click();\n            // Use the username and password for the current user\n            await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n            await driver.findElement(By.css(\"input[placeholder='Password']\")).sendKeys(user.password);\n            // await driver.findElement(By.css('button[type = \"submit\")]')).click();\n            const loginButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n            await loginButton.click();\n            \n            await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n            const currentUrl = await driver.getCurrentUrl();\n            assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n            await logoutIfLoggedIn(); \n            // Add any additional steps to log out if necessary, before testing the next user",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5094ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5094ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "587449a1-a356-485e-8f59-d07dc27d8310",
              "parentUUID": "1222252a-8150-4fe7-ad6d-414a205be57c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4",
              "fullTitle": "Login Functionality Test 4",
              "timedOut": false,
              "duration": 5404,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "console.log(\"Username:\", user.emailAddress);\n            console.log(\"Password:\", user.password);\n            \n            await navigateToLoginPage();\n            const loginbtn = await driver.findElement(By.className('login-button'));\n            await loginbtn.click();\n            // Use the username and password for the current user\n            await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n            await driver.findElement(By.css(\"input[placeholder='Password']\")).sendKeys(user.password);\n            // await driver.findElement(By.css('button[type = \"submit\")]')).click();\n            const loginButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n            await loginButton.click();\n            \n            await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n            const currentUrl = await driver.getCurrentUrl();\n            assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n            await logoutIfLoggedIn(); \n            // Add any additional steps to log out if necessary, before testing the next user",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5159ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5159ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "6b51ca6c-584d-4f61-ae54-0dccf074f6e5",
              "parentUUID": "1222252a-8150-4fe7-ad6d-414a205be57c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5",
              "fullTitle": "Login Functionality Test 5",
              "timedOut": false,
              "duration": 5402,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "console.log(\"Username:\", user.emailAddress);\n            console.log(\"Password:\", user.password);\n            \n            await navigateToLoginPage();\n            const loginbtn = await driver.findElement(By.className('login-button'));\n            await loginbtn.click();\n            // Use the username and password for the current user\n            await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n            await driver.findElement(By.css(\"input[placeholder='Password']\")).sendKeys(user.password);\n            // await driver.findElement(By.css('button[type = \"submit\")]')).click();\n            const loginButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n            await loginButton.click();\n            \n            await driver.wait(until.urlContains(DASHBOARD_URL), 5000);\n            const currentUrl = await driver.getCurrentUrl();\n            assert.strictEqual(currentUrl.includes(DASHBOARD_URL), true, `User ${index + 1} should be on the dashboard page`);\n            await logoutIfLoggedIn(); \n            // Add any additional steps to log out if necessary, before testing the next user",
              "err": {
                "message": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5164ms",
                "estack": "TimeoutError: Waiting for URL to contain \"http://localhost:3000/hire-wire-front-end/jobapplication\"\nWait timed out after 5164ms\n    at C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\node_modules\\selenium-webdriver\\lib\\webdriver.js:928:22\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "8eb3dd23-0641-4650-b1d1-09462a01eb81",
              "parentUUID": "1222252a-8150-4fe7-ad6d-414a205be57c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "30a91404-22f9-4be0-8a7c-cc16dc77de39",
            "9322f013-c47f-4b37-a09e-5f56466b712b",
            "587449a1-a356-485e-8f59-d07dc27d8310",
            "6b51ca6c-584d-4f61-ae54-0dccf074f6e5",
            "8eb3dd23-0641-4650-b1d1-09462a01eb81"
          ],
          "pending": [],
          "skipped": [],
          "duration": 28041,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "eb5235f8-bad8-4801-904d-165214568517",
          "title": "User Registration Functionality Test",
          "fullFile": "C:\\Users\\talla\\OneDrive\\Desktop\\Laxmi\\MEng\\ENSF608\\project\\selenium-test-project\\test\\user_registration_test.js",
          "file": "\\test\\user_registration_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"before all\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 886,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('chrome').build();",
              "err": {},
              "uuid": "290d666d-3e06-4c50-a371-77c0ba54b48b",
              "parentUUID": "eb5235f8-bad8-4801-904d-165214568517",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"after all\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "44e09016-507d-43e5-8eb5-bbc5799ec28b",
              "parentUUID": "eb5235f8-bad8-4801-904d-165214568517",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"User Registration Functionality Test\"",
              "fullTitle": "User Registration Functionality Test \"after each\" hook in \"User Registration Functionality Test\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await logoutIfLoggedIn();",
              "err": {},
              "uuid": "e4cc0ab4-7ae1-4733-9ce0-68efd5330ece",
              "parentUUID": "eb5235f8-bad8-4801-904d-165214568517",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "1",
              "fullTitle": "User Registration Functionality Test 1",
              "timedOut": false,
              "duration": 1143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        // Check if an error message appears or redirect to a success page\n        const errorMessage = await driver.findElements(By.css('.error-message'));\n        if (errorMessage.length) {\n            const errorText = await errorMessage[0].getText();\n            assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n        } else {\n            const currentUrl = await driver.getCurrentUrl();\n            assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n        }",
              "err": {},
              "uuid": "b3c1b2f4-8a26-485c-8cfa-2a96e3cb27e9",
              "parentUUID": "eb5235f8-bad8-4801-904d-165214568517",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2",
              "fullTitle": "User Registration Functionality Test 2",
              "timedOut": false,
              "duration": 451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        // Check if an error message appears or redirect to a success page\n        const errorMessage = await driver.findElements(By.css('.error-message'));\n        if (errorMessage.length) {\n            const errorText = await errorMessage[0].getText();\n            assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n        } else {\n            const currentUrl = await driver.getCurrentUrl();\n            assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n        }",
              "err": {},
              "uuid": "94ad2e3c-1416-4e77-98aa-4525a7aba162",
              "parentUUID": "eb5235f8-bad8-4801-904d-165214568517",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3",
              "fullTitle": "User Registration Functionality Test 3",
              "timedOut": false,
              "duration": 428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        // Check if an error message appears or redirect to a success page\n        const errorMessage = await driver.findElements(By.css('.error-message'));\n        if (errorMessage.length) {\n            const errorText = await errorMessage[0].getText();\n            assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n        } else {\n            const currentUrl = await driver.getCurrentUrl();\n            assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n        }",
              "err": {},
              "uuid": "865d3ad2-a263-416a-86c4-f1cca547ee0a",
              "parentUUID": "eb5235f8-bad8-4801-904d-165214568517",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4",
              "fullTitle": "User Registration Functionality Test 4",
              "timedOut": false,
              "duration": 370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        // Check if an error message appears or redirect to a success page\n        const errorMessage = await driver.findElements(By.css('.error-message'));\n        if (errorMessage.length) {\n            const errorText = await errorMessage[0].getText();\n            assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n        } else {\n            const currentUrl = await driver.getCurrentUrl();\n            assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n        }",
              "err": {},
              "uuid": "77d49d9d-20f0-4880-a3df-a3163a5744b3",
              "parentUUID": "eb5235f8-bad8-4801-904d-165214568517",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5",
              "fullTitle": "User Registration Functionality Test 5",
              "timedOut": false,
              "duration": 356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await navigateToRegistrationPage();\n        console.log(\"Email:\", user.emailAddress);\n        console.log(\"FirstNAme:\", user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"First Name\"]')).sendKeys(user.firstName);\n        await driver.findElement(By.css('input[placeholder=\"Last Name\"]')).sendKeys(user.lastName);\n        await driver.findElement(By.css('input[placeholder=\"Email\"]')).sendKeys(user.emailAddress);\n        await driver.findElement(By.css('input[placeholder=\"Password\"]')).sendKeys(user.password);\n        await driver.findElement(By.css('input[placeholder=\"Re-enter Password\"]')).sendKeys(user.confirmPassword);\n        //await driver.findElement(By.css('input[placeholder=\"Phone Number (optional)\"]')).sendKeys(user.firstName);\n        const registerButton = await driver.findElement(By.css('button[type=\"submit\"]'));\n        await registerButton.click();\n        // Check if an error message appears or redirect to a success page\n        const errorMessage = await driver.findElements(By.css('.error-message'));\n        if (errorMessage.length) {\n            const errorText = await errorMessage[0].getText();\n            assert.strictEqual(errorText, \"We're sorry, we couldn't sign you up\", 'Expected error message on registration failure');\n        } else {\n            const currentUrl = await driver.getCurrentUrl();\n            assert.notStrictEqual(currentUrl, DASHBOARD_URL, \"registration successfull\");\n        }",
              "err": {},
              "uuid": "4b2b0326-2f9d-4635-89ce-544e59af2607",
              "parentUUID": "eb5235f8-bad8-4801-904d-165214568517",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3c1b2f4-8a26-485c-8cfa-2a96e3cb27e9",
            "94ad2e3c-1416-4e77-98aa-4525a7aba162",
            "865d3ad2-a263-416a-86c4-f1cca547ee0a",
            "77d49d9d-20f0-4880-a3df-a3163a5744b3",
            "4b2b0326-2f9d-4635-89ce-544e59af2607"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2748,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "TestReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "TestReport"
      },
      "version": "6.2.0"
    }
  }
}